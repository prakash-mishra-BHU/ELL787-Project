/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.11.2023 09:15:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[6] = { 26096, -32204, -30413, -37372, -36106, -37496, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const TfArray<6, float> quant2_scale = { 6, { 0.00019905364024452865, 0.00020250650413800031, 0.0002167760394513607, 0.00017754854343365878, 0.00018281348457094282, 0.00018028479826170951, } };
const TfArray<6, int> quant2_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[6*1*1*32] = { 
  /* [0][0][][] */ 18,51,-55,-69,-49,-18,47,36,-39,42,-35,59,-105,-12,127,-59,4,13,1,57,-14,48,45,2,-97,-18,-64,-34,95,-25,-69,-91, 
  /* [1][0][][] */ 49,-66,-5,-34,101,1,-127,37,84,-54,-102,45,25,-26,-75,-4,2,-5,-56,-100,-11,56,-17,-59,85,53,112,-32,-48,26,-38,99, 
  /* [2][0][][] */ -29,-61,67,-23,76,103,-127,71,-66,-17,56,-72,71,-38,-20,75,31,-2,-72,-68,65,93,-103,-3,-97,73,-78,-15,7,43,-35,-82, 
  /* [3][0][][] */ 82,-79,15,27,47,-51,-119,40,82,111,-14,-96,116,1,-4,-11,96,47,85,-127,44,-73,-111,71,-42,110,-114,18,-26,-20,84,93, 
  /* [4][0][][] */ -31,25,124,-6,-39,-70,8,-44,-37,-93,28,62,28,-86,-92,-16,17,81,101,-40,9,127,92,-21,73,8,11,37,-23,-76,75,32, 
  /* [5][0][][] */ 82,80,-34,119,48,7,-92,117,-51,-114,115,-88,-44,-113,-93,-19,-73,-98,-42,82,-16,17,23,39,127,-12,-25,79,52,68,-59,-13, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 6,1,1,32 } };
const TfArray<6, float> quant3_scale = { 6, { 0.0036967583000659943, 0.0037608835846185684, 0.0040258928202092648, 0.0032973727211356163, 0.0033951515797525644, 0.0033481896389275789, } };
const TfArray<6, int> quant3_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 412, 312, 170, 201, 277, 41, 1980, 294, -211, 364, 203, 139, -131, 245, 2397, -251, -308, 418, 373, 1260, -134, 492, 625, -449, 443, 102, 448, 469, -137, 106, -323, -97, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.7782654291950166e-05, 4.6356264647329226e-05, 4.7417495807167143e-05, 5.0504102546256036e-05, 4.2006027797469869e-05, 4.5795124606229365e-05, 4.924839231534861e-05, 4.4506006815936416e-05, 5.0166974688181654e-05, 4.4630993215832859e-05, 4.5658343879040331e-05, 5.6590939493617043e-05, 5.8913745306199417e-05, 5.7419889344600961e-05, 5.805887485621497e-05, 4.6047003706917167e-05, 5.0927043048432097e-05, 4.487341720960103e-05, 4.4157128286315128e-05, 4.8809062718646601e-05, 5.2418847189983353e-05, 4.422630081535317e-05, 4.5314467570278794e-05, 4.5842672989238054e-05, 4.7030684072524309e-05, 4.4429165427573025e-05, 4.8933896323433146e-05, 4.8700880142860115e-05, 4.1854858864098787e-05, 4.5064069126965478e-05, 4.2514860979281366e-05, 4.5572152885142714e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -15,-48,105,11,91,-7,-73,-85,40,-74,-90,13,61,18,-31,59,-44,-21,-63,-48,-74,-87,8,107,-127,21,80,-42,107,9,-6,-66,83,-45,-75,63,-96,-65,-73,35,89,-76,-76,100,57,-82,109,-22,9,-73,-48,66,-55,-41,-67,109,36,69,122,-86,-58,88,-47,52,-11,23,69,95,51,102,86,-106,106,-82,48,91,-88,18,-62,37,57,15,90,-8,-38,-43,-60,91,25,99,2,-90,24,62,-2,25, 
  /* [1][0][][] */ -33,26,-44,26,-27,89,39,-7,45,-99,-100,90,58,-13,15,61,99,-46,28,106,-57,-6,31,25,57,15,-42,105,20,4,127,-60,52,103,-6,31,42,68,-21,-65,-71,20,-9,-94,-18,46,-23,-58,-28,-31,125,82,32,63,-55,-39,19,90,57,64,-65,106,-73,-56,-48,41,62,34,101,30,11,9,-108,94,-48,59,79,-46,-50,64,-49,101,-38,-85,29,99,-50,-89,74,70,91,40,89,75,50,23, 
  /* [2][0][][] */ 14,51,-81,36,-8,-52,82,103,-73,88,-26,84,90,-20,89,-91,-48,-10,46,60,-72,-4,111,25,1,76,108,23,-54,87,63,91,-57,-12,-81,-88,-60,62,111,-16,-102,-66,-31,7,-75,100,-15,-51,106,-28,99,-60,-48,75,-11,2,-59,95,-50,9,-3,60,-14,57,98,52,58,88,-74,16,13,-55,39,-83,40,16,-36,-5,22,24,-4,-121,2,-66,1,-74,-37,-11,89,127,-16,-22,-63,-57,-31,-115, 
  /* [3][0][][] */ 90,6,51,-22,-54,63,-96,28,27,37,42,5,95,101,70,19,94,82,-62,-15,89,-66,-60,-89,-20,-81,-56,104,57,-67,94,16,-41,-11,-1,-5,-89,-60,38,41,-8,-84,-87,11,89,47,-18,-85,53,-90,30,-12,95,30,94,-64,-91,-98,-92,-52,-92,52,-37,72,51,-9,-54,-13,-16,-68,0,73,35,-127,58,-30,41,81,80,-43,-68,-97,49,53,42,43,-24,-119,-65,47,17,-75,102,-74,-88,20, 
  /* [4][0][][] */ 59,114,5,38,-33,-34,32,38,97,89,7,81,39,-38,1,-50,-18,7,-61,27,127,-88,101,34,-52,-4,81,-59,-52,51,-75,-50,62,121,20,-112,-37,-8,-96,63,-40,-65,-91,-74,37,126,39,71,28,-77,-30,-100,-83,62,-73,24,31,-84,43,36,27,-62,-25,-68,-46,61,20,-24,34,-83,-85,-72,-41,4,119,66,69,-25,10,-42,9,-58,-102,-53,14,84,102,28,-116,-61,58,51,33,120,-113,-56, 
  /* [5][0][][] */ 80,-79,68,54,21,-120,13,64,127,-121,-3,-74,17,87,42,42,46,56,-60,94,45,40,21,-44,-103,-71,-16,-92,30,32,-9,-104,-57,1,-72,-3,-116,-51,53,9,-92,-53,14,95,-37,33,26,-45,-102,93,12,6,20,26,23,-40,79,36,-59,-46,25,-68,43,-82,-35,91,-14,31,69,-21,96,-63,-47,53,-19,-75,-1,-59,27,85,77,31,27,90,-87,92,-23,59,72,-75,120,65,-29,37,53,-106, 
  /* [6][0][][] */ 33,-6,123,94,-59,-52,48,54,17,-70,42,-93,81,91,98,-77,34,-9,14,103,-50,-83,116,42,1,-45,-11,-30,-5,-99,73,-67,-49,-87,-16,-64,-18,80,-79,52,127,126,30,-7,-81,121,-60,-30,-90,106,-8,23,84,-23,99,0,36,-12,-31,101,-88,1,56,-28,-37,67,94,-20,84,-7,-65,14,57,-23,-61,6,-34,-100,-34,1,63,5,48,-5,-18,-26,17,-84,118,99,116,21,-37,-67,91,23, 
  /* [7][0][][] */ 126,72,-25,-45,-73,109,-21,9,127,3,-86,25,61,-79,53,85,50,21,-5,112,60,35,2,88,-94,99,50,55,-75,115,-11,34,15,33,68,90,-104,83,2,-23,95,-76,84,78,60,16,107,-107,46,-70,-123,-106,-17,93,31,35,101,-82,15,-46,15,5,81,-105,-70,-46,75,32,-100,22,71,86,93,27,70,68,-57,41,-87,55,94,-38,-13,-79,95,43,-92,103,84,14,97,72,-47,-29,-21,-68, 
  /* [8][0][][] */ 16,14,-48,-70,38,20,-65,-12,14,47,37,107,6,-33,-81,-70,-54,76,-64,16,15,-8,68,100,-127,92,35,51,-57,7,-94,103,99,-36,48,8,104,15,-12,69,84,76,-80,-105,-20,-35,-20,85,5,-110,-76,-18,-53,-16,-15,-77,60,96,-71,98,110,43,28,94,-44,-51,-23,84,-83,72,42,-7,72,67,5,26,-47,95,58,63,37,69,-105,-75,30,19,76,-30,16,-55,-82,89,-55,-88,-58,66, 
  /* [9][0][][] */ -2,15,98,52,86,-103,-34,-97,43,71,9,57,-21,-65,-106,-33,13,24,-66,-54,9,106,-94,-108,127,14,-9,21,1,-56,-86,101,71,5,36,-9,-54,41,-17,-45,74,-60,69,-99,53,18,-87,78,70,-34,-76,-49,74,-51,-58,103,104,-51,11,-9,-86,101,106,-57,-75,-3,106,56,-40,111,122,-72,28,98,-96,-84,-91,-91,-30,98,29,9,123,39,-32,-72,46,0,115,28,-21,93,107,-1,73,-12, 
  /* [10][0][][] */ -40,98,104,-77,-4,115,97,26,31,34,14,-74,104,92,-17,25,-38,81,-82,-72,-6,28,50,-59,60,51,-101,-87,-35,94,-76,-77,72,112,113,70,-44,-19,-32,24,-44,110,-113,-24,-67,-35,16,-50,14,-22,55,27,59,39,-59,-28,-112,-19,16,-44,-18,90,115,39,127,-51,-82,-7,36,-53,-104,-67,91,46,-68,101,-1,57,76,35,73,-2,70,77,-87,86,79,-31,48,35,17,-54,-40,-26,-38,-86, 
  /* [11][0][][] */ 81,10,-8,88,84,34,36,24,127,62,-53,86,-11,-65,27,-53,-43,-89,49,41,54,57,17,-87,-51,-77,-20,55,57,-10,11,-16,-68,-58,38,38,-41,64,-23,-55,-28,77,-56,7,-24,-47,-80,-63,43,101,91,64,-72,-78,10,15,-52,-49,-22,-66,-44,62,61,-1,19,65,-40,17,70,53,-50,-45,19,81,-82,42,-42,19,-26,70,-70,-13,-55,-10,27,-60,13,73,-69,5,8,-80,-64,-8,-31,-23, 
  /* [12][0][][] */ 2,62,-56,-21,65,3,-25,38,-33,52,-11,10,-28,6,44,-53,-70,-14,-27,-57,30,-4,14,74,-46,-31,79,-68,68,19,-46,86,-56,-47,-33,14,8,-72,-5,35,95,24,-91,-22,-19,-69,-24,94,-20,-127,-55,72,11,17,-66,61,-6,-41,37,58,50,90,9,31,84,28,-25,94,44,61,30,53,69,70,-7,-12,-21,38,-72,-60,-64,59,35,-11,-24,36,24,103,-65,-65,71,26,71,4,9,33, 
  /* [13][0][][] */ 78,-36,72,78,75,92,70,45,94,-70,11,-25,73,56,59,-40,-72,-43,-41,45,78,-17,99,-30,-31,35,4,20,-64,-72,58,41,46,81,-9,34,-54,-14,17,62,-43,61,-38,12,-31,23,-3,-13,41,88,-24,-76,-77,32,71,-58,-25,28,-19,-47,-1,87,-52,10,-34,-46,-71,68,-25,-4,90,5,-69,35,-59,-32,-71,67,78,-38,39,-68,79,20,-70,-58,66,127,-2,-32,-57,39,80,-39,58,2, 
  /* [14][0][][] */ -26,-53,78,98,87,40,48,-90,-40,1,92,53,6,-17,-33,-49,40,-26,47,58,12,51,35,61,-67,-12,-13,43,-52,-86,-25,107,109,32,20,29,60,127,35,-50,48,-28,77,81,81,-31,53,-59,106,116,69,18,99,20,22,41,-4,38,43,105,6,-45,-4,96,-45,18,78,-42,-29,-55,-29,105,15,87,57,-4,78,-68,58,38,72,23,-71,11,-74,-24,-27,89,113,10,95,-20,58,77,24,89, 
  /* [15][0][][] */ 1,-10,-35,44,62,-97,35,-67,95,-26,-62,1,96,-2,-68,-91,73,15,-68,26,70,16,76,82,65,43,40,82,0,64,30,-109,-21,1,-64,-29,-63,72,121,-73,0,89,-71,-13,10,-60,-39,-61,-2,-98,-14,9,-116,-73,-67,-28,37,38,-54,103,-38,-69,19,71,-40,87,-48,9,-54,-27,64,-58,17,-47,65,-114,-10,36,123,86,-101,38,-94,-78,-118,-12,-111,70,93,91,-89,-56,33,127,-107,68, 
  /* [16][0][][] */ -75,8,68,-65,43,91,-37,35,53,57,-92,53,-11,-48,-42,-66,93,80,78,58,98,69,-37,46,-22,59,-64,52,-86,4,16,16,-76,64,46,57,-22,39,-46,-55,38,-40,64,72,40,64,81,-5,-32,-127,8,85,-59,115,48,32,38,77,41,22,100,91,44,47,50,6,-29,83,35,76,-27,-9,25,76,43,58,-11,101,-90,-21,-9,-85,46,6,1,95,69,25,61,5,-21,81,53,-24,-82,17, 
  /* [17][0][][] */ 24,-87,18,67,-21,-107,-52,-81,43,-61,84,37,111,66,-95,55,39,68,122,124,-78,8,22,-33,52,87,-61,46,123,-34,-38,82,-3,-10,47,34,-24,93,-77,-19,-74,-28,-9,1,1,-6,100,-84,100,57,8,49,-21,97,83,-63,-90,96,-77,-104,42,-80,92,102,-63,-58,58,-79,-90,-11,114,37,33,-114,-53,61,127,-21,51,-36,-4,-33,-63,-98,-97,84,68,-20,37,94,-83,-120,-14,111,19,9, 
  /* [18][0][][] */ -89,111,89,-72,17,-90,-82,0,-37,104,-101,-55,-21,46,62,-59,29,-8,74,-16,93,-35,25,-58,61,-63,-7,127,52,44,20,56,74,-9,-89,-75,-14,26,-34,71,-17,9,-30,-4,-103,-10,45,10,34,-83,90,53,-98,5,9,103,-7,46,-15,-109,84,119,28,54,-46,-100,-31,99,77,-93,-71,111,-78,-32,-83,-100,67,80,-4,-77,-63,-20,-10,-65,109,-25,65,45,-96,-73,-64,112,91,-64,61,-25, 
  /* [19][0][][] */ 22,13,81,62,80,-43,127,67,73,-47,61,-15,-85,33,-43,55,75,-99,115,71,-20,74,-39,16,70,-56,13,-55,-69,-112,-14,72,85,-65,39,19,-3,-34,-50,-84,63,-40,-68,8,-50,34,56,-96,-37,114,1,60,-7,1,16,0,30,97,10,-20,48,-38,81,84,-43,3,-13,5,13,47,70,-14,-68,-81,-47,-45,-17,-105,1,89,75,-55,-33,82,-78,-8,23,-24,90,12,-3,69,-14,92,112,-21, 
  /* [20][0][][] */ -20,70,41,53,-67,71,19,58,31,19,-68,-11,-4,66,43,-56,-43,-19,-36,-24,33,-36,-62,-60,67,-53,-80,41,15,18,-52,94,84,40,-15,46,37,-52,-6,-91,-53,-29,-79,-78,-26,-58,-57,94,66,-127,-76,14,9,109,36,-10,82,58,62,82,91,-41,-39,-37,-16,-51,-31,20,-63,-88,-61,69,-49,-87,28,4,90,70,103,89,45,-12,72,-31,42,111,-38,80,23,91,26,44,11,36,-9,-23, 
  /* [21][0][][] */ 71,89,60,-119,107,-75,76,34,14,-59,-57,56,14,33,-36,-74,-92,-14,40,2,120,-40,83,-72,75,-81,-16,85,23,18,-5,-13,-3,25,-82,-103,127,97,-96,-19,-7,14,-5,0,-94,-76,-74,111,-6,-101,14,105,45,81,-88,18,-58,64,-35,123,69,-65,30,-6,96,39,-19,-59,-89,-2,71,89,42,-19,83,72,-97,-12,77,117,15,58,44,-78,32,-80,67,-65,-95,94,113,-123,-77,-50,79,-55, 
  /* [22][0][][] */ 39,-38,-59,-85,94,-52,104,52,-89,91,-68,-111,110,-89,-108,-71,28,85,-117,-52,97,-61,36,25,127,6,-105,107,-41,-63,-53,-109,51,65,25,27,14,0,-51,-124,2,-1,-8,87,52,-97,94,-5,-53,-19,33,32,-47,-91,-50,32,-4,-33,-13,-45,93,-78,-58,-110,-48,27,-101,-44,112,91,-9,4,-61,14,64,-70,47,-28,72,98,112,-83,-59,-84,80,90,103,-54,-29,64,-52,49,45,25,-11,110, 
  /* [23][0][][] */ 67,-94,12,47,81,-111,3,-110,44,-80,66,55,7,-99,10,-49,69,-48,-108,75,76,-78,81,-43,-22,-16,63,14,62,39,70,-46,-39,40,7,33,72,-23,-119,-9,-105,-18,14,-115,-65,-88,100,5,57,-125,-93,-83,62,-73,-43,78,-72,-36,78,42,-121,-91,-65,-20,14,37,-120,-106,51,-22,90,-82,-16,-43,-49,-94,32,-36,79,100,-58,-50,19,-127,84,-6,97,-35,-85,35,100,-3,97,-43,-37,72, 
  /* [24][0][][] */ -47,-33,-77,-67,-69,-92,-64,-70,60,108,87,63,120,68,-28,-89,-65,52,12,-37,93,-63,-38,-19,66,-27,86,69,114,68,19,-51,1,21,59,31,-30,-75,72,-4,-74,-91,74,19,38,-15,57,83,-69,-84,-7,43,83,60,76,-49,-11,86,42,7,99,11,43,93,-77,104,-31,-72,-83,67,-38,-15,-18,38,103,108,75,-52,-87,-58,-58,-89,-45,-127,23,64,3,-85,26,-90,20,-59,-2,29,-75,18, 
  /* [25][0][][] */ -91,-45,-91,-27,92,-75,-96,67,67,-96,-29,31,76,-8,-98,-14,-66,72,46,-101,77,83,-6,-53,-1,-42,-91,37,73,-78,21,116,95,-103,44,73,105,-65,-11,-10,-57,88,-111,12,90,38,62,44,-88,38,-75,-16,34,-1,-48,10,-4,56,-99,87,127,51,64,42,2,74,-4,4,-84,-12,-17,-105,44,-114,78,24,73,82,25,27,35,31,-50,53,-68,-32,-102,-66,-26,-32,104,20,-112,3,-37,-94, 
  /* [26][0][][] */ 42,-103,-28,-10,-89,-1,-5,8,-79,-116,114,101,-60,-49,10,3,113,38,-81,-39,20,69,105,19,32,51,30,43,17,16,-80,7,-36,-66,-75,-93,-34,91,-26,115,-84,95,33,42,-69,68,-38,113,-16,19,2,127,30,-44,6,-86,75,77,68,23,25,-75,68,-7,112,-23,-35,49,-76,95,96,102,84,-76,-58,24,47,-82,-73,26,-8,70,76,-67,86,-9,-23,31,-77,103,3,11,-55,91,57,82, 
  /* [27][0][][] */ 34,27,-37,-100,-87,-46,-58,-8,27,107,35,-102,-8,68,85,-8,61,1,60,-72,-74,20,-16,-8,-60,55,-76,17,77,48,-5,0,65,81,-65,-65,-62,-84,-84,84,-68,16,19,30,111,42,83,104,96,40,71,-43,-60,-58,15,-12,103,-11,-82,-67,-46,-33,-13,57,52,-19,-88,109,58,-11,-95,11,74,-76,9,-60,60,-34,88,104,84,-25,127,-96,-47,-56,-14,20,-30,14,-11,-29,67,27,87,24, 
  /* [28][0][][] */ 92,-8,93,44,-117,-71,-97,-82,-42,-114,63,73,-88,-92,3,98,90,106,-75,67,-11,22,-118,-81,-127,81,-94,-69,-77,-81,3,-23,-110,13,78,72,8,-115,-48,25,109,39,-81,46,-113,-13,8,40,20,-63,-48,-37,-88,18,57,37,57,-19,74,57,-15,-48,-107,6,49,72,-23,79,-84,22,-115,-29,65,35,-11,-101,-125,-71,-92,39,-76,-90,99,55,58,-121,63,-91,-107,-77,-43,-64,-40,52,-80,-74, 
  /* [29][0][][] */ 69,45,70,-53,-98,5,-124,20,120,-31,-81,-69,107,-89,-34,-26,-101,88,15,-68,-59,-30,50,-3,-61,-5,-38,-36,-104,6,103,-12,29,3,-73,-65,-19,95,4,83,37,91,-50,87,7,127,-44,-33,5,-9,42,-103,77,-97,121,50,-111,47,-43,106,-108,99,-97,-51,-70,-58,62,91,93,-74,36,-65,115,72,73,37,103,-78,-16,45,5,-74,-9,-82,72,109,52,96,-26,108,85,89,-85,32,-11,49, 
  /* [30][0][][] */ 18,-65,-69,27,-102,16,-66,-13,113,-23,0,-45,-110,8,53,11,-13,37,90,-110,37,-107,-113,8,-113,17,-72,114,-20,-109,-95,-2,-93,-79,-127,-63,15,-19,-4,25,89,-79,-16,97,96,-46,97,59,-71,66,15,-106,94,-53,-16,94,-84,-60,-82,-56,-107,-10,-74,-30,-113,-93,-96,86,-70,102,40,-37,-96,107,41,-89,-65,-73,-75,-64,22,16,-106,-23,-109,29,-111,108,-38,-116,70,48,-42,-8,7,-75, 
  /* [31][0][][] */ 81,-90,23,78,51,58,-55,-87,-28,-12,-62,-57,105,-114,-52,108,-49,-75,23,57,51,33,-21,118,35,-101,47,37,-68,-71,43,106,28,18,-83,-5,110,-11,-55,-89,70,-57,-31,39,8,-51,-31,34,72,-20,86,-14,-98,-51,-74,36,-105,78,21,127,-16,5,81,-75,72,102,-46,-71,60,-87,-97,11,-79,-29,10,9,-41,-31,41,96,-67,-46,42,45,70,85,-78,20,0,-65,-89,-48,4,88,0,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0020307628437876701, 0.0019701411947607994, 0.0020152435172349215, 0.0021464242599904537, 0.0017852560849860311, 0.001946292701177299, 0.002093056682497263, 0.0018915052060037851, 0.0021320963278412819, 0.0018968172371387482, 0.001940479502081871, 0.0024051149375736713, 0.0025038341991603374, 0.0024403452407568693, 0.0024675021413713694, 0.0019569976720958948, 0.0021643992513418198, 0.0019071202259510756, 0.0018766778521239758, 0.0020743850618600845, 0.0022278008982539177, 0.0018796176882460713, 0.0019258648389950395, 0.0019483135547488928, 0.0019988040439784527, 0.001888239523395896, 0.0020796905737370253, 0.0020697873551398516, 0.001778831472620368, 0.001915222848765552, 0.0018068816279992461, 0.0019368164939805865, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 871, -9, 3048, 4193, 2800, -2037, 2824, -1030, -1887, -433, 3436, -1122, 2777, 3604, 1294, 1881, -483, -431, -920, 4411, 1735, -582, 2236, -360, -355, 2081, 1235, 1462, 3627, 1654, 3066, 911, 1238, 3681, 3554, 3169, -325, 3133, 2085, -2269, -153, 920, 219, 1429, -786, 369, -927, 574, -6161, 1546, 876, -1945, 4788, -720, 1577, 916, 764, 1987, -606, -1211, 203, 947, 281, 2651, 3901, 2720, 2660, 3184, 3077, -445, 2505, 3510, 2269, -1300, 4481, 5181, 532, -2802, 363, 867, 8735, 1657, -322, -2100, 820, 417, 903, -2064, 2398, -159, 2522, 703, 70, -1939, 164, 1242, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00022039194300305098, 0.00033722192165441811, 0.00020131385826971382, 0.00018369128520134836, 0.00022569198335986584, 0.00019744175369851291, 0.00021128050866536796, 0.00023784056247677654, 0.00021161008044146001, 0.00029446376720443368, 0.00018415534577798098, 0.00037278365925885737, 0.00020661808957811445, 0.00017074038623832166, 0.00022372686362359673, 0.00020747048256453127, 0.00034303654683753848, 0.00020909494196530432, 0.00031109672272577882, 0.00014583210577256978, 0.00025121780345216393, 0.00022242753766477108, 0.00017019751248881221, 0.00028345859027467668, 0.00051772501319646835, 0.00027243446675129235, 0.00023035089543554932, 0.00024916915572248399, 0.00019772874657064676, 0.00025237453519366682, 0.00017469198792241514, 0.00027411180781200528, 0.00027283528470434248, 0.00017391907749697566, 0.00017590225616004318, 0.00015325310232583433, 0.00029740680474787951, 0.00016851596592459828, 0.00016991111624520272, 0.00022029300453141332, 0.00029807494138367474, 0.0002185953053412959, 0.00020507644512690604, 0.00020705132919829339, 0.00027797999791800976, 0.00018358157831244171, 0.00025336805265396833, 0.00027008418692275882, 0.00011056048970203847, 0.0002252408885397017, 0.00029699545120820403, 0.00022699483088217676, 0.0001648172183195129, 0.0002123174344887957, 0.00021773621847387403, 0.00025653143529780209, 0.00022700794215779752, 0.00021277790074236691, 0.0002657820878084749, 0.00023404299281537533, 0.0003161383792757988, 0.00025341342552565038, 0.00036897428799420595, 0.00024960917653515935, 0.00016981911903712898, 0.00017498938541393727, 0.00016492024587932974, 0.0002216496504843235, 0.00021055201068520546, 0.00023874160251580179, 0.00019379412697162479, 0.00020560206030495465, 0.00021149069652892649, 0.00017680542077869177, 0.00016187626169994473, 0.00015659508062526584, 0.00020189971837680787, 0.00022529363923240453, 0.00025231129257008433, 0.00025978739722631872, 0.00010003174975281581, 0.00017571116040926427, 0.00028126142569817603, 0.0002026503934757784, 0.00025842097238637507, 0.00019700665143318474, 0.00024757350911386311, 0.00018485108739696443, 0.00027741864323616028, 0.00028952379943802953, 0.00024459924316033721, 0.00029274204280227423, 0.00022163854737300426, 0.00022501042985823005, 0.00037305784644559026, 0.000268545001745224, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -14,121,-94,34,61,-41,99,80,-51,-2,33,-111,80,127,-71,18, 
  /* [1][0][][] */ -26,10,-65,-33,-12,54,17,-127,32,-38,-14,-64,-2,-42,-56,7, 
  /* [2][0][][] */ -22,-27,30,74,19,45,-108,127,-20,4,75,-63,-19,-68,-38,67, 
  /* [3][0][][] */ 101,-92,75,2,-4,-35,-21,127,-20,59,71,51,-15,57,19,-3, 
  /* [4][0][][] */ -33,-15,2,36,-78,21,-18,-127,2,4,21,-7,31,42,113,99, 
  /* [5][0][][] */ 127,32,-37,-21,-77,23,26,82,7,-19,80,89,123,31,-88,6, 
  /* [6][0][][] */ 18,-39,-71,-53,-89,-2,3,-55,-36,-49,-25,23,76,40,127,-15, 
  /* [7][0][][] */ -61,39,-34,-85,-1,-51,-68,7,-85,64,-68,-76,-127,-46,13,89, 
  /* [8][0][][] */ 52,53,68,5,62,25,71,14,69,-37,44,0,-127,-29,-83,12, 
  /* [9][0][][] */ -44,59,34,-51,-22,-6,31,-21,-28,51,-48,20,55,127,16,37, 
  /* [10][0][][] */ 77,40,-35,57,-29,-26,38,-40,-85,-40,-58,-86,-127,-61,18,82, 
  /* [11][0][][] */ 38,-4,64,0,-5,-34,19,90,-87,17,-34,14,-23,-10,50,127, 
  /* [12][0][][] */ -66,-14,-3,-9,39,0,117,38,-52,16,-8,-21,7,81,-68,127, 
  /* [13][0][][] */ -8,38,16,26,107,48,99,74,-25,89,-69,-65,53,67,-127,-6, 
  /* [14][0][][] */ -126,127,-11,-11,-16,11,59,-1,-25,31,125,-25,-75,22,-57,46, 
  /* [15][0][][] */ -7,-21,-127,-35,80,-39,-87,-27,-23,-26,-13,-69,-2,-69,-48,41, 
  /* [16][0][][] */ 114,-10,3,-2,19,-26,34,-13,-40,14,127,39,49,12,-30,9, 
  /* [17][0][][] */ 9,27,-26,-121,0,-62,116,-127,-6,-27,-59,31,44,82,-5,63, 
  /* [18][0][][] */ 27,106,-6,-41,47,-76,-20,-54,-39,127,-20,8,-29,44,-12,-22, 
  /* [19][0][][] */ -66,-108,127,-81,48,-113,30,-29,62,58,96,90,24,-1,88,-50, 
  /* [20][0][][] */ -22,84,52,-4,11,-4,26,-34,56,-14,87,-17,-127,-35,-82,0, 
  /* [21][0][][] */ -63,48,38,6,64,32,87,43,-127,74,-44,22,-42,15,-52,-35, 
  /* [22][0][][] */ 9,-91,41,0,19,-127,122,-4,12,-46,-46,-67,37,-102,-65,-45, 
  /* [23][0][][] */ -56,-93,49,65,38,-28,23,-38,11,-46,76,10,-2,70,80,127, 
  /* [24][0][][] */ -10,-11,21,67,33,17,-42,-127,56,19,-33,24,8,-5,-31,-17, 
  /* [25][0][][] */ -9,31,23,-47,-19,-4,5,-27,-34,49,-44,-15,36,127,24,7, 
  /* [26][0][][] */ -56,72,9,14,33,-91,-3,-32,9,17,7,81,2,-6,-73,127, 
  /* [27][0][][] */ -18,-127,-39,6,-63,85,2,-65,13,-35,47,-19,34,-48,-107,-14, 
  /* [28][0][][] */ -36,-4,35,73,27,9,-37,-127,-109,40,88,-7,79,5,-49,-18, 
  /* [29][0][][] */ -127,108,-30,-34,-19,19,-122,-71,-33,-27,-3,-8,11,-68,-112,63, 
  /* [30][0][][] */ 40,83,-55,79,-111,-102,-70,-18,-24,-14,14,-127,120,24,-23,97, 
  /* [31][0][][] */ 127,25,-57,-47,-66,24,116,28,-63,-11,60,63,47,15,-22,19, 
  /* [32][0][][] */ -39,-16,127,-1,-17,77,69,20,-30,-22,-13,20,16,76,61,52, 
  /* [33][0][][] */ -16,38,-85,-59,-20,27,123,24,18,-18,26,-84,116,127,-74,59, 
  /* [34][0][][] */ -86,-12,91,28,35,-44,93,2,-127,34,48,-58,49,69,-43,-42, 
  /* [35][0][][] */ 0,30,-52,19,-62,127,-46,-6,-29,106,5,76,-56,82,29,32, 
  /* [36][0][][] */ -4,-78,127,-43,-54,15,-38,-8,9,21,-48,90,-7,-78,-31,40, 
  /* [37][0][][] */ 68,-3,69,-39,115,-82,-33,22,-54,127,-72,-2,-84,-54,90,-9, 
  /* [38][0][][] */ 58,58,22,-103,-8,-61,-111,66,-71,67,-101,-68,-82,-127,-105,53, 
  /* [39][0][][] */ -74,23,-51,-32,-69,-79,61,21,-127,-41,14,83,29,-1,-7,55, 
  /* [40][0][][] */ 127,48,21,-95,-58,36,11,-36,-55,-16,-54,-87,32,65,45,36, 
  /* [41][0][][] */ 102,-78,-59,-43,-2,-3,-67,-15,62,-27,4,-62,127,-69,63,-39, 
  /* [42][0][][] */ -8,-88,-51,127,5,-97,-112,17,10,4,18,53,-79,81,-68,-3, 
  /* [43][0][][] */ -96,-39,-48,-124,-50,-3,-5,82,41,-127,-46,31,-16,-53,-34,98, 
  /* [44][0][][] */ -47,53,33,-47,-12,-25,28,123,100,-88,72,100,127,51,-31,10, 
  /* [45][0][][] */ 32,79,-69,81,127,-96,-36,-64,102,-68,66,-59,-37,-2,-70,59, 
  /* [46][0][][] */ -27,-33,1,-10,102,-11,22,22,-20,120,-30,-127,51,86,-54,86, 
  /* [47][0][][] */ 78,-50,-25,-17,75,-17,-37,-66,-11,127,-34,46,-10,-108,-87,20, 
  /* [48][0][][] */ 2,27,-15,-120,-13,-37,122,-127,14,12,-32,42,68,68,3,44, 
  /* [49][0][][] */ -42,127,-49,39,33,-50,87,55,-27,29,62,-78,-30,85,109,-102, 
  /* [50][0][][] */ 11,34,-18,4,-127,0,-63,-60,57,67,30,32,-32,-39,-3,33, 
  /* [51][0][][] */ 127,-52,-42,-24,-60,98,-92,-59,62,-6,-44,81,-25,-82,-11,52, 
  /* [52][0][][] */ -36,-31,30,62,-35,-90,-127,-2,-41,-55,-27,-83,34,-52,-6,77, 
  /* [53][0][][] */ 21,89,49,-127,-1,100,83,-27,-1,-10,-3,-30,84,-115,-1,59, 
  /* [54][0][][] */ 35,127,2,-13,-1,-95,-111,62,15,-29,-35,121,79,95,21,56, 
  /* [55][0][][] */ -41,-7,52,19,46,-23,110,77,-87,-1,13,11,127,53,4,0, 
  /* [56][0][][] */ 127,25,17,22,-39,97,-60,-65,-33,41,-89,-4,-52,101,2,31, 
  /* [57][0][][] */ -53,-51,-40,-40,-71,-109,78,-36,-127,-22,49,79,11,30,-10,61, 
  /* [58][0][][] */ 52,-50,61,29,12,-60,-22,14,21,-22,-127,-28,21,-27,-32,41, 
  /* [59][0][][] */ 70,11,-115,79,17,25,92,-32,-75,-46,29,-88,-127,-70,26,118, 
  /* [60][0][][] */ -8,25,-4,13,-13,-25,-16,-4,-36,-64,52,123,-45,-127,-38,0, 
  /* [61][0][][] */ -29,24,91,-100,-75,76,-7,125,-16,-97,49,61,127,15,22,125, 
  /* [62][0][][] */ 69,35,-3,-127,-14,2,9,-44,-12,35,-39,52,28,-27,-84,-64, 
  /* [63][0][][] */ -4,-24,10,-12,-63,-63,-49,0,-69,-4,-37,-13,127,-1,45,-6, 
  /* [64][0][][] */ 19,10,-5,44,-94,-30,-14,-97,67,127,25,8,32,-71,-53,112, 
  /* [65][0][][] */ -31,5,-16,-22,-66,66,28,-30,55,-118,87,-56,59,55,-127,64, 
  /* [66][0][][] */ -118,114,-105,-80,51,-42,-122,-56,-122,114,104,0,-127,-49,58,50, 
  /* [67][0][][] */ 3,-26,-124,-127,74,84,13,-36,-31,-2,43,-21,29,37,22,52, 
  /* [68][0][][] */ 58,29,-20,-33,-67,45,7,44,-52,67,127,-25,-7,-29,-104,-12, 
  /* [69][0][][] */ 67,-127,75,-63,34,-127,-18,124,-9,63,74,104,-45,64,-46,13, 
  /* [70][0][][] */ 50,10,127,25,105,-34,125,8,21,19,-72,47,-95,47,-70,36, 
  /* [71][0][][] */ 5,21,90,-70,-127,-79,18,2,-25,-6,15,-88,-65,-2,6,34, 
  /* [72][0][][] */ -60,-81,18,-127,80,-14,5,42,-68,7,-124,-16,54,107,-54,122, 
  /* [73][0][][] */ 29,20,47,4,127,-83,-54,14,-29,92,-84,28,-86,-45,127,-24, 
  /* [74][0][][] */ -108,19,-127,-81,71,-45,-38,24,-90,-4,-118,-30,-37,-66,-50,94, 
  /* [75][0][][] */ 87,-31,43,-51,29,3,-127,-30,-12,-105,73,10,9,-20,-16,-1, 
  /* [76][0][][] */ -1,-44,-40,115,45,103,77,-49,71,-127,71,96,50,-66,-79,33, 
  /* [77][0][][] */ -35,-32,127,-27,38,-17,-32,-106,9,22,35,85,53,58,23,0, 
  /* [78][0][][] */ -53,16,5,-40,-13,-40,37,-16,34,0,28,-104,-95,-65,-127,-58, 
  /* [79][0][][] */ -97,-53,-26,13,127,27,-22,15,29,27,-27,43,-45,-82,-69,-17, 
  /* [80][0][][] */ 4,-103,39,120,-29,-23,-127,100,-15,28,81,-13,-78,-9,-14,71, 
  /* [81][0][][] */ 127,59,-14,84,-13,30,21,119,25,19,111,65,113,29,72,-29, 
  /* [82][0][][] */ -61,3,15,-40,21,-127,-125,-100,8,95,-59,-39,-17,106,-82,-22, 
  /* [83][0][][] */ 106,-15,79,-26,-36,-7,-127,-3,25,-110,12,-53,-12,-5,17,-27, 
  /* [84][0][][] */ 18,-78,-91,38,121,25,31,36,-127,11,-124,-9,43,-32,-78,22, 
  /* [85][0][][] */ 9,99,34,-41,113,14,30,-102,127,-56,39,-26,100,-71,6,-1, 
  /* [86][0][][] */ 115,-36,127,49,-3,-45,77,34,-57,-44,-96,-47,37,25,-59,4, 
  /* [87][0][][] */ -9,16,17,-83,76,-18,-40,16,34,-39,83,-40,-87,-127,-3,24, 
  /* [88][0][][] */ -52,-23,38,-1,28,27,-61,-41,1,14,-65,-127,-43,-34,-11,-20, 
  /* [89][0][][] */ -89,18,13,-81,12,15,-127,13,85,33,-64,-9,0,-94,-56,-13, 
  /* [90][0][][] */ -16,-1,-41,-92,127,14,-59,36,48,49,29,-20,35,8,-77,-15, 
  /* [91][0][][] */ -32,-60,32,47,-59,-7,-7,72,-56,-53,29,-36,-8,73,35,127, 
  /* [92][0][][] */ -23,73,7,-19,-14,64,-88,36,-44,-2,53,6,-24,127,44,26, 
  /* [93][0][][] */ -7,65,-48,-60,69,65,-75,13,56,50,73,62,-127,24,-35,69, 
  /* [94][0][][] */ 19,55,88,7,-127,-32,15,-17,20,-5,30,-12,-38,-23,11,-18, 
  /* [95][0][][] */ -27,8,49,-14,127,-29,-56,52,11,3,-72,95,-20,-15,63,-11, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.002062101848423481, 0.0031552240252494812, 0.0018835972296074033, 0.0017187113407999277, 0.0021116917487233877, 0.0018473678501322865, 0.0019768504425883293, 0.0022253601346164942, 0.0019799340516328812, 0.0027551564853638411, 0.0017230532830581069, 0.0034879581071436405, 0.0019332264782860875, 0.0015975360292941332, 0.0020933051127940416, 0.0019412018591538072, 0.0032096286304295063, 0.0019564011599868536, 0.0029107828158885241, 0.0013644811697304249, 0.0023505245335400105, 0.0020811478607356548, 0.0015924565959721804, 0.0026521862018853426, 0.0048441048711538315, 0.0025490387342870235, 0.0021552830003201962, 0.002331356517970562, 0.0018500530859455466, 0.0023613476660102606, 0.0016345091862604022, 0.0025647329166531563, 0.0025527889374643564, 0.001627277466468513, 0.0016458331374451518, 0.0014339158078655601, 0.0027826928999274969, 0.001576723181642592, 0.001589776948094368, 0.0020611761137843132, 0.0027889444027096033, 0.0020452914759516716, 0.0019188020378351212, 0.0019372800597921014, 0.0026009255088865757, 0.0017176847904920578, 0.0023706434294581413, 0.0025270483456552029, 0.0010344615438953042, 0.0021074709948152304, 0.0027788442093878984, 0.0021238818299025297, 0.0015421157004311681, 0.0019865524955093861, 0.0020372534636408091, 0.0024002417922019958, 0.0021240045316517353, 0.0019908607937395573, 0.0024867956526577473, 0.0021898280829191208, 0.0029579552356153727, 0.0023710678797215223, 0.0034523156937211752, 0.0023354734294116497, 0.0015889160567894578, 0.0016372918616980314, 0.0015430797357112169, 0.0020738695748150349, 0.0019700343254953623, 0.0022337906993925571, 0.0018132387194782495, 0.0019237198866903782, 0.0019788171630352736, 0.0016542836092412472, 0.0015145986108109355, 0.0014651850797235966, 0.0018890788778662682, 0.0021079645957797766, 0.0023607558105140924, 0.0024307062849402428, 0.00093594915233552456, 0.0016440451145172119, 0.0026316284202039242, 0.0018961025634780526, 0.0024179213214665651, 0.0018432968063279986, 0.0023164267186075449, 0.0017295629950240254, 0.0025956733152270317, 0.0027089354116469622, 0.0022885978687554598, 0.0027390469331294298, 0.0020737657323479652, 0.0021053147502243519, 0.0034905234351754189, 0.0025126468390226364, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 8421, 12073, -4483, 1674, -549, 9130, 55, 2647, 15984, -3265, -7585, 8149, -13072, 12431, 4951, 9419, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.3479722080519423e-05, 5.729802796849981e-05, 4.7652902139816433e-05, 8.6683459812775254e-05, 7.8538847446907312e-05, 8.5427207523025572e-05, 4.486160833039321e-05, 5.8794903452508152e-05, 9.3843518698122352e-05, 7.5239840953145176e-05, 5.4875246860319749e-05, 6.8272660428192466e-05, 8.5349245637189597e-05, 6.5027648815885186e-05, 0.00011986660683760419, 8.0447854998055845e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -96,30,44,-32,-58,-7,-64,-14,-42,12,-7,-31,26,24,27,-24,19,2,83,18,9,-41,127,53,38,19,6,28,-52,-102,-83,2,-38,-39,19,18,1,24,-10,37,-14,0,-75,1,-61,-35,3,79,-6,14,-29,-21,-19,8,22,-50,-82,7,3,65,45,24,-12,18,-24,-49,-40,29,-35,-49,0,-13,15,0,-65,-44,-43,16,-29,15,-48,66,81,-55,0,45,14,39,35,-19,0,-36,-32,-38,-57,18, 
  /* [1][0][][] */ 47,21,40,-33,-78,-33,-5,33,-16,19,45,-39,-1,9,-63,-39,-8,1,-62,23,-3,-88,-12,65,-15,-63,-4,-43,64,-93,118,-80,59,30,-2,52,47,67,-8,-34,41,21,-3,-9,2,69,-127,-50,-75,-53,-14,-16,56,-53,-39,57,6,1,-39,22,26,65,1,-105,-21,-21,-61,-13,-2,-13,-68,2,-54,-24,24,-78,18,14,23,-80,-24,-34,-96,-43,33,-42,-28,20,-77,-9,-64,62,34,67,-48,58, 
  /* [2][0][][] */ 76,-25,31,16,10,-69,62,22,6,-14,-12,-1,-66,-42,6,-37,-89,-41,-32,61,8,-74,-38,40,12,-72,23,-18,-43,39,-55,125,-54,127,-35,15,-12,-18,-17,-16,-103,84,65,16,-68,6,-10,-8,46,6,-30,-51,46,-27,-19,51,43,8,44,-15,1,37,-50,13,80,12,-14,6,34,45,-43,8,59,48,72,34,42,-78,81,66,91,2,-31,20,-44,34,22,66,25,8,-25,25,-53,41,-5,46, 
  /* [3][0][][] */ 0,-17,-37,2,28,-13,7,-74,-31,67,39,43,12,-19,-52,50,5,-26,23,2,10,127,48,-56,-7,8,-25,4,73,-25,56,-20,-20,30,-28,-22,12,52,25,8,-68,-30,-26,17,-30,18,15,-5,-7,-44,12,-25,34,-68,-30,-33,14,73,-15,7,-3,-9,-38,24,26,45,-35,-2,-4,6,3,-56,-19,-44,33,-12,6,8,-33,-21,-22,-1,-41,24,-17,-37,35,-20,5,19,33,-30,41,26,-47,54, 
  /* [4][0][][] */ 26,10,-29,16,25,30,-35,11,-34,74,82,-28,-4,11,16,-48,4,-15,-30,33,10,-37,58,87,-57,-6,-127,8,-44,-69,12,12,-62,-46,21,58,13,38,25,19,-36,-40,42,-23,5,11,-30,53,-51,45,0,17,55,-2,-79,8,45,-22,4,-4,52,-4,33,0,-51,24,-29,0,-54,27,-54,43,33,-58,-46,-49,31,-49,2,4,-43,71,-71,8,-27,26,23,-60,42,-5,22,20,-60,-27,41,18, 
  /* [5][0][][] */ -95,40,67,-20,47,-8,76,-30,-15,31,-3,-23,49,-27,-17,-57,6,-35,51,40,-123,-27,-91,43,-35,-7,52,21,28,-85,-20,54,53,127,-25,47,-3,20,42,-21,-21,103,71,-37,-19,66,37,9,-13,31,-38,38,-4,-56,30,-89,42,-58,-59,-53,66,82,-41,-22,69,-39,-95,-62,-76,-34,-55,-15,-29,13,-27,-50,17,-42,-35,-15,119,-14,26,-92,-94,43,25,-12,-58,36,23,1,-21,29,8,78, 
  /* [6][0][][] */ 41,2,-64,24,-45,-115,93,103,-47,56,-20,66,-106,-82,63,48,-11,-68,1,13,-16,-19,-78,-44,-41,37,82,17,22,17,91,-53,33,16,11,-85,22,9,43,70,-2,13,-47,-19,18,-47,-71,23,39,-127,-38,65,46,16,-26,-78,62,44,7,-18,-97,42,-89,-16,27,0,5,55,40,12,-9,-51,-39,31,83,39,70,-39,63,-67,-2,-60,-87,69,9,-62,41,7,-47,52,37,47,-36,0,-18,118, 
  /* [7][0][][] */ 23,88,-38,-61,-28,-13,44,9,-70,41,-51,-77,-31,14,21,-15,-52,-43,-37,51,-12,127,24,32,-8,4,9,35,58,27,76,-39,63,32,-24,12,-1,-8,7,25,-60,-6,4,-70,15,-49,82,-29,41,-71,-92,-37,-44,36,-9,-6,34,13,-97,19,1,112,39,-21,-28,5,-50,19,-43,-23,-120,25,28,65,-51,50,-47,66,32,-74,-21,-68,69,-57,55,-19,-11,-3,-18,63,-87,55,63,-43,-49,0, 
  /* [8][0][][] */ 2,79,-59,55,-26,-30,-88,23,-113,-22,-3,-5,-54,48,39,102,-1,-44,9,-6,28,7,5,-20,-53,69,-13,29,-3,-11,-41,-36,-27,-46,-20,-71,-44,25,42,2,5,-38,31,15,-45,-42,-2,-17,-26,-30,60,82,9,-11,-76,104,-30,31,2,-27,-42,20,29,69,-39,-54,-43,-13,-46,14,-1,12,-24,-58,-121,-21,-50,39,-76,-53,-36,-15,-41,-28,-6,-8,18,23,19,56,-63,-10,-87,-127,14,-57, 
  /* [9][0][][] */ -20,13,-79,48,-22,-31,64,60,-6,33,-14,107,-36,-21,15,127,16,21,66,14,26,8,41,-101,-38,-5,26,-4,6,-8,41,48,-33,0,-3,-109,19,-15,-29,-13,-14,22,43,-12,-13,9,13,13,32,81,34,-4,-63,-80,6,0,-4,-18,59,-12,-65,51,-62,-20,83,-6,-24,10,-59,19,42,42,-1,83,-9,-25,-28,27,-54,-6,50,-17,67,-10,32,-24,-18,-25,-52,30,1,-8,55,32,-47,0, 
  /* [10][0][][] */ 72,1,-44,-13,-41,-45,62,-6,16,-11,-9,-11,-87,-19,-7,-16,-60,-34,19,21,32,25,10,6,-46,81,41,-8,-48,-82,-32,-12,81,-28,36,7,80,-89,68,127,8,-51,-6,6,-25,-86,-7,54,34,87,-65,-46,-32,18,9,48,20,-55,77,54,-2,49,-49,-20,-10,-61,7,57,11,-36,-17,46,105,36,23,-69,19,-53,62,-7,-47,23,21,18,-35,-3,14,31,-29,-6,34,46,42,64,-36,11, 
  /* [11][0][][] */ -55,-30,42,-79,13,-2,-34,-55,60,-49,1,1,-1,-19,12,6,-69,-11,50,23,-52,20,-61,-80,26,9,-28,39,25,-60,39,-29,23,-9,3,-10,-72,18,-114,9,-78,60,-42,50,34,3,3,-36,27,-33,-57,-62,4,29,80,-72,-23,-62,23,-66,-36,-61,-41,-116,15,-73,71,80,127,27,67,-26,-30,-5,70,-45,94,32,32,56,34,13,-15,81,74,16,-5,-13,-65,-69,-7,12,47,43,59,80, 
  /* [12][0][][] */ 29,-22,24,-49,27,113,-4,44,65,48,12,68,31,60,12,-26,-59,43,17,70,116,-5,56,-67,47,28,-63,-75,-37,68,0,19,34,-12,-2,-50,57,-11,-37,-31,24,-17,52,65,-36,59,-4,-9,-71,29,-13,41,-34,-50,14,12,-57,50,1,46,44,-114,37,-127,-12,97,-21,-32,-22,-67,71,16,-30,15,-9,63,-18,31,-59,-7,-27,40,114,9,-2,77,-28,-72,70,23,-86,52,57,3,-9,-97, 
  /* [13][0][][] */ -31,36,9,-61,-42,-12,13,-29,17,-44,-26,-91,82,-103,-45,-98,-13,-40,-92,-15,-105,-34,13,102,-21,8,114,12,3,-60,53,53,6,1,-127,117,-27,-57,37,-76,122,15,-8,36,-9,-84,67,-34,79,-15,-68,33,25,-3,-14,66,66,-68,-44,0,73,18,21,-110,-13,31,-49,46,-83,-59,-93,-4,-75,26,-58,-82,-104,10,64,97,-21,58,37,-84,74,45,26,-20,-23,-4,-7,25,-73,6,-18,-18, 
  /* [14][0][][] */ -13,27,-84,-36,78,81,-87,-17,27,-29,81,-17,12,-38,-45,-63,-59,23,32,127,7,-31,7,2,-4,35,-27,66,18,-18,-28,2,65,0,-47,-8,-23,52,66,20,53,-1,18,-2,-13,-54,65,-42,38,-5,-4,-36,32,17,-39,26,20,63,-78,-10,-19,-59,-47,-86,10,-44,-59,-1,-67,50,-25,34,16,-29,-31,-28,31,-6,-37,-13,26,4,4,-5,-13,43,-7,-23,-23,65,72,9,6,-45,-53,-57, 
  /* [15][0][][] */ -75,-33,63,-60,0,-24,-34,-68,9,1,-11,63,8,-12,42,74,-112,-30,15,-62,19,-27,-21,-66,67,-4,56,-55,-71,-114,-61,34,-34,50,85,-91,1,-31,33,-31,-30,-7,37,-13,13,12,73,100,-56,-12,4,-42,-33,58,16,-63,-102,-19,90,4,-16,6,-83,10,-63,-21,21,25,50,-79,82,-35,48,-26,-37,-41,22,12,64,6,-19,65,46,25,11,-8,-127,3,-14,-58,-87,43,36,-38,-7,58, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0018478882266208529, 0.0024351661559194326, 0.0020252482499927282, 0.0036840469110757113, 0.0033379010856151581, 0.0036306562833487988, 0.0019066182430833578, 0.0024987834040075541, 0.0039883493445813656, 0.0031976932659745216, 0.0023321979679167271, 0.0029015878681093454, 0.0036273428704589605, 0.0027636750601232052, 0.005094330757856369, 0.0034190337173640728, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 1012, -363, -1598, -3429, -1419, 1878, -744, -1588, -88, 1266, 6266, -1713, -2017, 9998, 9120, -5654, 15342, 2968, -4430, 1630, -1393, -598, 2726, -2581, 192, -3439, -3784, -2948, -71, -7670, -1041, -211, 12212, 252, -3769, 343, -1424, -673, -1043, 7395, 348, 388, -2261, -4627, 15432, 14855, -138, 12724, -310, 11637, 13867, -3942, -309, -1531, -447, 8007, -1210, 303, 13129, 7332, 4792, 11938, 5367, -7489, 936, 886, -2147, 1829, -3061, -1344, 592, 2463, 11617, -1065, -1750, 11411, -1455, 536, 9646, -820, -2475, 13783, -1210, 2455, 17643, 2737, -5694, -4354, -2441, -4257, 14140, -297, -22, -1873, -4748, -3695, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00040108422399498522, 0.00016945137758739293, 9.7357726190239191e-05, 0.00015954536502249539, 0.00025674901553429663, 0.00029249154613353312, 0.00035935238702222705, 0.00021563417976722121, 0.0001947276177816093, 0.00021371808543335646, 7.9858815297484398e-05, 0.0003095495339948684, 0.00025455621653236449, 0.00012586158118210733, 0.00016737532860133797, 0.00010310346988262609, 9.2043665063101798e-05, 0.00025431023095734417, 0.00013733901141677052, 8.0037876614369452e-05, 0.00021776031644549221, 0.00034746219171211123, 0.00019207739387638867, 0.00017436358029954135, 0.00062271935166791081, 0.00025155587354674935, 0.00032923943945206702, 0.00011191904195584357, 0.00020222512830514461, 7.8365854278672487e-05, 0.00036864035064354539, 0.00028072998975403607, 0.00018024786550085992, 0.00022088953119236976, 0.00028059419128112495, 0.00038710416993126273, 0.00019071258429903537, 0.00053393602138385177, 0.00033828397863544524, 0.0001561682001920417, 0.00016585391131229699, 0.0003082931216340512, 0.00019863659690599889, 0.00018237436597701162, 8.1233476521447301e-05, 8.4966763097327203e-05, 0.00026350404368713498, 0.00015810232434887439, 0.00019644586427602917, 7.6002499554306269e-05, 0.0001597029622644186, 9.699672955321148e-05, 0.00015729499864391983, 0.00019773848180193454, 0.00024870422203093767, 0.00025597246713005006, 0.00021549846860580146, 0.00018527229258324951, 0.00015330473252106458, 0.00012921013694722205, 0.00017448655853513628, 0.00015943846665322781, 0.00013751094229519367, 0.00010398746962891892, 0.00018462733714841306, 0.00026010948931798339, 0.00030578262521885335, 0.00024012007634155452, 0.0002144115132978186, 0.00015628384426236153, 0.00024942189338617027, 0.00015738066576886922, 8.6778854893054813e-05, 0.0003137448220513761, 0.00037037086440250278, 9.1594636614900082e-05, 0.00013178514200262725, 0.000144106728839688, 0.00016146688722074032, 0.00025642779655754566, 0.00032928222208283842, 0.00010556631605140865, 0.00023072172189131379, 0.00017124976147897542, 7.3855691880453378e-05, 0.00021283150999806821, 0.00011538089893292636, 0.00013483695511240512, 0.00025217680376954377, 0.00026770131080411375, 7.5496303907129914e-05, 0.0003057895228266716, 0.00021145548089407384, 0.00038843150832690299, 0.00010062345972983167, 0.00028068097890354693, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 11,127,9,12,-37,5,48,43,51,-79,-71,54,3,14,19,-34,-79,16,24,37,33,39,64,107,25,-9,-23,7,-18,30,22,-16,-62,-1,-21,101,5,38,9,-9,28,-41,12,19,-117,-86,27,-24,-32,-89,-40,9,35,58,-13,-6,-66,-79,-68,-127,-107,20,-89,22,-29,45,35,-22,-15,69,44,-22,-22,15,48,-22,10,-46,-77,44,12,-54,54,-27,-61,-57,-1,30,-97,-8,-94,37,75,4,66,5, -55,-35,8,75,-8,112,-22,-1,78,25,-127,74,-21,-49,-88,127,-94,64,65,89,125,-9,95,127,37,12,30,59,4,127,-9,-127,75,85,16,57,97,104,-30,-122,127,-11,117,127,-53,-112,127,-69,-15,-127,-88,-16,22,127,-28,-127,17,34,-127,-77,-1,-127,-29,95,-38,72,96,-22,2,127,127,-13,-55,22,-30,-94,32,-59,7,127,5,-30,127,-75,-111,-49,86,76,106,79,-87,-5,127,-22,127,31, 19,-121,16,17,-15,-5,-5,57,8,34,-60,36,4,38,-7,-45,-30,9,6,44,43,34,59,104,27,-35,33,32,4,28,-4,-61,-59,-73,-23,43,7,-9,24,15,-1,40,1,39,-42,-65,9,22,36,-75,-4,23,0,2,17,0,59,-98,-35,-73,-86,28,-67,10,39,29,-31,-20,-17,38,25,-1,-1,-47,3,-6,9,-19,-85,8,9,-70,33,-16,-2,-47,9,-14,-66,-19,-27,30,18,37,28,0, 
  /* [0][1][][] */ 90,-7,59,127,6,-68,127,47,-39,-127,-78,127,6,-127,-47,25,-84,-56,66,26,-127,-2,-127,-51,-10,51,-97,127,-81,85,127,98,7,51,21,127,-127,58,-21,-92,49,-127,34,51,-127,-90,3,-91,-122,-95,-80,23,127,-44,85,-12,-127,3,-49,-4,-51,-83,-45,46,-105,-14,115,-77,-56,24,-39,-127,-127,77,127,-86,122,63,-107,-28,127,-125,-38,114,-48,-24,36,98,5,23,-87,37,-12,-62,82,-16, -127,13,-93,87,-72,-127,-116,-127,76,4,-24,32,-95,-125,-46,126,-127,-127,127,127,31,-127,-114,102,-127,127,20,75,-65,-21,-107,81,-127,83,127,-35,33,127,127,-68,-43,27,28,40,-32,-127,-81,-127,-2,-101,-127,127,40,58,51,-44,26,37,87,-10,-15,-33,-127,127,-10,-127,127,127,14,48,-106,-67,-27,56,-111,-127,127,127,65,-44,-71,-13,-93,87,-127,-89,127,127,127,127,-127,-127,-107,-45,73,127, 59,-5,89,81,12,-30,-2,41,-57,70,-49,81,23,-38,-127,63,13,-37,5,3,-126,15,-78,-61,1,15,127,-1,127,107,17,-105,-28,-127,0,116,-125,-13,-44,-36,-11,94,41,80,-44,-31,-6,-73,127,-87,-50,7,60,-64,-127,21,90,-1,-103,58,-10,-61,-1,46,127,-31,14,-12,-62,3,-26,-51,-115,-127,3,-56,13,-25,-127,-28,-54,-127,-9,127,-113,4,23,5,-25,-6,-6,51,-22,127,31,-8, 
  /* [0][2][][] */ 26,-122,53,-2,10,18,30,56,-47,-45,1,-43,20,-1,-12,60,-30,13,-18,37,14,55,1,-17,30,53,7,-22,-39,9,7,23,-28,-30,-15,-22,66,-11,8,-31,8,6,4,-33,-49,-21,-11,5,-22,14,-31,42,6,1,-29,-3,-11,-1,8,19,-11,-4,66,-5,-34,42,-34,-18,33,14,12,72,-39,27,27,-6,-19,-48,-7,-3,24,-41,-26,-58,-78,24,14,0,-79,28,2,45,-8,15,14,-14, -49,11,127,10,127,82,-20,22,-127,21,-70,-44,127,-21,-58,54,-2,40,-13,-41,38,26,17,24,82,-37,-7,16,-14,92,-14,12,-78,25,22,-51,74,51,32,-127,-12,-15,-127,20,-35,5,-40,-63,-5,-78,-77,92,117,-54,-24,-73,-6,127,-26,-3,127,-123,107,72,-23,5,-34,15,127,-7,-3,84,-78,21,-10,-68,-2,-99,-35,-54,0,-47,-31,-86,-89,127,42,7,91,28,47,45,-32,-2,7,-5, 13,82,46,-12,5,-4,-15,50,-4,46,10,-7,25,1,-43,60,-32,1,-20,40,0,46,-13,-17,15,39,13,13,13,18,-19,-67,-50,-27,-6,-36,53,-54,5,45,2,-23,27,3,-84,-11,-6,-10,20,16,-26,26,-13,-10,19,9,18,-3,5,43,-36,14,41,-10,24,20,-49,16,32,-3,-4,71,-13,-1,3,-14,-8,-16,-16,-2,8,-71,-14,-27,-74,15,22,-3,-67,25,39,46,-12,14,-2,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.017046079039573669, 0.0072016837075352669, 0.0041377032175660133, 0.0067806779406964779, 0.010911832563579082, 0.012430890463292599, 0.015272476710379124, 0.0091644525527954102, 0.0082759233191609383, 0.0090830186381936073, 0.0033939995337277651, 0.013155855238437653, 0.01081863883882761, 0.0053491168655455112, 0.0071134511381387711, 0.0043818973936140537, 0.0039118556305766106, 0.010808184742927551, 0.0058369077742099762, 0.0034016098361462355, 0.0092548131942749023, 0.014767142944037914, 0.0081632891669869423, 0.0074104517698287964, 0.026465572416782379, 0.010691124014556408, 0.013992675580084324, 0.0047565591521561146, 0.0085945678874850273, 0.0033305487595498562, 0.01566721498966217, 0.011931024491786957, 0.0076605342328548431, 0.0093878051266074181, 0.011925253085792065, 0.016451926901936531, 0.0081052845343947411, 0.022692279890179634, 0.014377068728208542, 0.0066371485590934753, 0.0070487908087670803, 0.0131024569272995, 0.0084420554339885712, 0.0077509107068181038, 0.0034524225629866123, 0.0036110873334109783, 0.01119892206043005, 0.0067193489521741867, 0.0083489492535591125, 0.0032301063183695078, 0.0067873760126531124, 0.0041223610751330853, 0.0066850371658802032, 0.0084038851782679558, 0.010569929145276546, 0.010878830216825008, 0.0091586848720908165, 0.0078740725293755531, 0.0065154507756233215, 0.0054914304055273533, 0.0074156788177788258, 0.0067761349491775036, 0.0058442149311304092, 0.0044194674119353294, 0.0078466618433594704, 0.011054652743041515, 0.012995761819183826, 0.010205103084445, 0.0091124894097447395, 0.0066420631483197212, 0.010600429959595203, 0.0066886781714856625, 0.0036881011910736561, 0.013334155082702637, 0.015740761533379555, 0.0038927721325308084, 0.0056008682586252689, 0.0061245360411703587, 0.006862342357635498, 0.010898181237280369, 0.013994494453072548, 0.0044865682721138, 0.0098056728020310402, 0.0072781150229275227, 0.0031388669740408659, 0.0090453391894698143, 0.004903688095510006, 0.0057305707596242428, 0.010717513971030712, 0.011377305723726749, 0.0032085929997265339, 0.012996054254472256, 0.0089868577197194099, 0.01650833897292614, 0.0042764968238770962, 0.011928941123187542, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5038, 2756, 342, -867, 3882, 6419, 6348, 1428, -149, 5001, 619, -3111, 2590, 1973, 346, -272, 2306, 7031, -629, -9, 2975, 11410, 6665, -1441, -2521, -573, 6310, -159, 979, 972, 5679, -1556, 6073, 1906, 2825, -3266, 730, -4027, 178, 1515, 1841, 984, 1196, -256, 835, 1468, 2853, 2588, 2155, 1440, 3610, 1686, -1677, 1125, 913, 1884, 1377, 2080, 5989, 972, -800, 4426, 2306, 2528, 3156, 5035, -4270, 1591, 4189, -718, 3557, 1218, 2057, 2840, 2177, 1342, -429, 1625, 2084, 2846, 2402, 1857, 7922, 435, 2102, 3197, 599, -690, 9662, -240, 560, -840, 9063, 2008, -74, -696, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00015205303498078138, 0.00014178156561683863, 0.00025719776749610901, 0.00031806243350729346, 0.00017318371101282537, 0.00012002218863926828, 0.0001321336894761771, 0.00018346066644880921, 0.00026127000455744565, 0.00015970169624779373, 0.00021337356884032488, 0.00017258831940125674, 0.00019570290169212967, 0.00025777856353670359, 0.00027248423430137336, 0.00020440704247448593, 0.00024622774799354374, 0.00010729413770604879, 0.00014499937242362648, 0.0002108745975419879, 0.00020000117365270853, 8.0708930909167975e-05, 0.00013169492012821138, 0.00021547361393459141, 0.00022990658180788159, 0.00020972160564269871, 0.00013658335956279188, 0.00019584225083235651, 0.00025961382198147476, 0.00017932156333699822, 0.00015295478806365281, 0.00019291820353828371, 0.00013459900219459087, 0.00026254999102093279, 0.0002317537582712248, 0.0001841187768150121, 0.00021772414038423449, 0.00015759926463942975, 0.00016072019934654236, 0.00024078843125607818, 0.00022150596487335861, 0.00023957673693075776, 0.00028485193615779281, 0.00024938210844993591, 0.00033479294506832957, 0.00027303324895910919, 0.00018617442401591688, 0.00023213251552078873, 0.00026116438675671816, 0.0003261382516939193, 0.00019353856623638421, 0.00023299043823499233, 0.00021965333144180477, 0.00026936284848488867, 0.00026653974782675505, 0.00023530457110609859, 0.00025222479598596692, 0.00019049571710638702, 0.00012920211884193122, 0.00024827686138451099, 0.00030015970696695149, 0.00016031041741371155, 0.00022931522107683122, 0.00022561225341632962, 0.00018645607633516192, 0.00014643781469203532, 0.00014223884500097483, 0.00025235163047909737, 0.00015025917673483491, 0.00026538633392192423, 0.00019625457935035229, 0.00020232214592397213, 0.00020176115504000336, 0.00014882234972901642, 0.00023845041869208217, 0.00016842114564497024, 0.00023778725881129503, 0.0002363873936701566, 0.00021327660942915827, 0.00018822714628186077, 0.00019062044157180935, 0.00021892759832553566, 0.00010177840886171907, 0.00023074385535437614, 0.00016970503202173859, 0.00021640681370627135, 0.00024549555382691324, 0.00032276572892442346, 9.7114854725077748e-05, 0.00020716273866128176, 0.00029530856409110129, 0.0002723167126532644, 9.5881405286490917e-05, 0.00019934984447900206, 0.00027057557599619031, 0.00017189123900607228, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -60,60,2,-45,-34,-66,-64,-49,63,-48,29,-57,79,-113,2,-127, 
  /* [1][0][][] */ -75,63,-95,-86,-82,33,-19,55,-48,12,72,-24,45,127,24,53, 
  /* [2][0][][] */ -41,-5,-59,-7,12,-70,17,-45,-74,88,61,32,40,32,-32,127, 
  /* [3][0][][] */ -44,-71,-5,-43,-84,14,-56,-119,6,16,39,-73,-66,-37,-127,-41, 
  /* [4][0][][] */ 104,2,-3,32,-72,-21,-127,41,8,69,5,52,5,-8,-45,-119, 
  /* [5][0][][] */ -98,69,-70,-39,69,-91,-45,-74,81,-28,10,-32,31,-127,-110,-125, 
  /* [6][0][][] */ -2,-44,-14,21,-76,55,39,-46,-34,-69,127,-22,10,-10,-120,11, 
  /* [7][0][][] */ -15,102,127,-104,62,68,12,-93,40,51,-111,-21,62,5,17,105, 
  /* [8][0][][] */ -39,-22,26,8,40,19,81,127,-65,-2,-73,-62,48,115,-68,-75, 
  /* [9][0][][] */ 19,44,90,22,-105,-40,-104,-102,59,15,127,37,-42,-76,54,-11, 
  /* [10][0][][] */ -15,-104,4,-74,-127,88,38,24,-41,-52,1,42,-5,60,-111,23, 
  /* [11][0][][] */ 107,-58,10,84,-89,-36,53,-19,127,110,-64,65,25,-76,-33,125, 
  /* [12][0][][] */ -63,-52,123,-14,66,-27,29,67,57,-21,127,92,-26,29,-101,31, 
  /* [13][0][][] */ -14,-28,24,7,7,10,127,16,-93,17,2,15,-16,92,79,-62, 
  /* [14][0][][] */ 111,-62,127,8,38,52,84,48,77,51,43,20,46,-34,21,-69, 
  /* [15][0][][] */ -7,123,9,-35,31,127,-77,60,-37,-38,-36,-15,-48,108,-30,-35, 
  /* [16][0][][] */ -47,57,117,-49,27,87,-2,-12,3,15,-20,41,82,-3,82,127, 
  /* [17][0][][] */ 10,105,78,-127,34,-51,14,-88,-49,94,-46,50,-41,-14,100,-61, 
  /* [18][0][][] */ -73,-5,-58,-82,102,102,-43,-76,31,87,106,93,-15,127,-32,-22, 
  /* [19][0][][] */ 42,121,105,76,54,-41,-5,1,-36,127,47,127,60,75,-47,20, 
  /* [20][0][][] */ 97,-13,6,67,-53,-1,-28,59,-23,-59,-127,-66,88,-50,26,-11, 
  /* [21][0][][] */ -75,-58,-21,123,-48,23,-127,78,5,3,9,3,-40,42,-53,-17, 
  /* [22][0][][] */ -20,11,-47,-48,127,-9,-41,58,56,81,40,75,-29,17,11,35, 
  /* [23][0][][] */ -75,26,-31,21,11,58,102,100,-28,127,-9,-45,-12,15,-45,-32, 
  /* [24][0][][] */ 27,-80,37,-6,127,24,76,-27,52,12,61,50,-66,32,-2,-10, 
  /* [25][0][][] */ 116,-62,89,15,13,-12,-35,88,127,-28,-57,0,107,-66,91,30, 
  /* [26][0][][] */ 60,35,106,80,77,-25,-65,-31,21,71,3,127,39,-65,20,-40, 
  /* [27][0][][] */ -38,32,-80,21,-51,108,31,-79,4,-70,98,27,26,-27,127,66, 
  /* [28][0][][] */ -45,43,-85,-127,39,-56,-21,-42,-112,74,-34,16,-24,17,-46,80, 
  /* [29][0][][] */ 112,118,-77,48,21,122,-35,-45,68,54,-4,78,-127,36,-39,102, 
  /* [30][0][][] */ -29,99,-126,-70,99,-42,20,12,-70,60,-83,-37,21,84,-36,127, 
  /* [31][0][][] */ 41,-110,86,39,62,-82,-97,29,-26,0,16,-28,-91,56,42,127, 
  /* [32][0][][] */ -70,70,-6,19,-105,56,22,45,13,-127,7,-88,7,28,29,65, 
  /* [33][0][][] */ -78,2,76,93,-14,20,-58,8,-59,-70,13,-19,-18,-8,0,127, 
  /* [34][0][][] */ 3,22,-79,-100,66,-20,-9,61,21,-10,-5,-13,-64,-34,-39,127, 
  /* [35][0][][] */ 79,-4,19,-5,-6,16,-81,-23,-14,-127,-52,12,-10,-33,52,-22, 
  /* [36][0][][] */ -6,21,-127,-28,15,90,-7,27,-24,27,56,26,7,23,-57,67, 
  /* [37][0][][] */ 63,32,56,-45,56,-127,43,-20,-124,36,-85,-20,-5,33,101,19, 
  /* [38][0][][] */ -49,127,37,-33,44,14,84,-88,21,3,-119,28,-53,-105,-82,2, 
  /* [39][0][][] */ 113,40,-127,-101,-11,-48,7,-51,8,-37,3,-39,41,-12,-90,-86, 
  /* [40][0][][] */ -28,35,-78,-80,-63,-16,9,-127,-9,-14,24,-45,54,67,40,77, 
  /* [41][0][][] */ -34,-107,-11,127,-2,-29,-65,-11,11,-56,65,-50,-70,-6,15,34, 
  /* [42][0][][] */ -9,76,-15,-127,17,14,4,-33,57,-8,-39,4,72,-32,-25,10, 
  /* [43][0][][] */ 12,33,9,30,127,20,18,30,14,28,-4,-74,-117,-46,-3,-23, 
  /* [44][0][][] */ 78,-22,38,53,-32,-15,5,39,42,-32,24,7,127,12,-50,-37, 
  /* [45][0][][] */ 9,-85,-61,15,-40,-80,25,37,30,-16,17,30,-78,127,26,-36, 
  /* [46][0][][] */ -31,-82,52,77,-4,-19,-83,43,43,-47,52,-3,35,69,61,127, 
  /* [47][0][][] */ -28,-53,17,85,-15,-3,54,21,9,-62,-127,-35,47,-20,-55,5, 
  /* [48][0][][] */ -61,80,-16,-29,11,52,-25,-97,1,-23,37,-50,26,-127,-48,14, 
  /* [49][0][][] */ -68,21,46,-45,-1,9,127,114,-34,-27,-21,34,-42,37,-66,27, 
  /* [50][0][][] */ 49,29,-69,26,39,-127,-50,-3,-86,56,-28,13,20,-71,-101,-47, 
  /* [51][0][][] */ -56,44,-39,96,-23,29,-56,-58,-22,-65,3,-58,11,21,-21,127, 
  /* [52][0][][] */ -127,2,23,0,23,57,67,14,14,-72,-39,-50,-105,-45,-116,-19, 
  /* [53][0][][] */ -73,-119,-57,-127,-30,-4,3,114,58,-58,-60,17,-46,11,71,104, 
  /* [54][0][][] */ -1,-57,4,-11,-49,67,53,-29,-27,-81,47,17,-31,-17,-127,30, 
  /* [55][0][][] */ -11,-42,-33,29,69,-43,45,91,-70,-49,-127,-24,46,-36,-12,31, 
  /* [56][0][][] */ 60,-34,-50,-29,-127,24,-122,-7,-9,-18,-33,9,102,-39,41,17, 
  /* [57][0][][] */ -73,-9,36,-10,127,54,65,48,-29,63,14,-15,-39,88,-125,-8, 
  /* [58][0][][] */ 32,15,10,-16,24,-9,-52,-59,44,-127,-65,-1,-86,-44,-24,45, 
  /* [59][0][][] */ -68,-21,-5,9,18,52,-99,-41,72,127,-90,6,-26,-5,-11,-7, 
  /* [60][0][][] */ 19,-60,-7,23,-127,-43,21,8,-9,52,-22,66,-5,-39,48,42, 
  /* [61][0][][] */ 33,9,-81,2,-36,-21,-127,-65,-26,6,33,119,62,-48,114,45, 
  /* [62][0][][] */ 44,-36,57,-13,-5,18,22,119,-43,127,3,92,14,25,81,91, 
  /* [63][0][][] */ 37,-111,-13,-16,-78,23,41,-23,-21,-25,-6,-18,-47,127,114,22, 
  /* [64][0][][] */ -20,-3,-115,-58,4,34,40,-37,-2,-98,30,-4,42,-62,-74,127, 
  /* [65][0][][] */ 0,-16,48,58,89,-32,97,78,-56,-12,-124,-81,55,127,-93,4, 
  /* [66][0][][] */ -33,-127,5,-113,-51,-122,42,-44,3,-28,-1,101,-86,-56,-89,70, 
  /* [67][0][][] */ -12,-64,-79,-23,-68,95,-8,-127,-82,-21,-48,-115,20,-14,-66,35, 
  /* [68][0][][] */ 119,66,15,-18,-59,27,-56,-56,-81,-127,-8,-19,28,-36,51,-53, 
  /* [69][0][][] */ 35,10,21,-21,-25,-21,-33,36,-31,127,-11,6,-16,43,76,-21, 
  /* [70][0][][] */ 23,-11,-1,53,-83,19,-14,-89,99,127,7,47,57,-54,-15,15, 
  /* [71][0][][] */ 127,-87,68,106,-106,-50,54,-46,125,-3,-59,58,77,-72,19,37, 
  /* [72][0][][] */ 4,-25,40,103,39,5,-127,75,72,-5,35,6,-41,-52,-55,65, 
  /* [73][0][][] */ 74,24,56,-113,78,-77,-102,57,-26,127,-18,38,23,-69,50,-50, 
  /* [74][0][][] */ 84,0,32,53,-127,-29,42,-5,-71,-48,2,-32,32,-75,16,27, 
  /* [75][0][][] */ 83,127,-127,13,76,70,-23,-31,-28,-32,74,87,-117,62,56,103, 
  /* [76][0][][] */ -64,-48,9,-50,-42,-13,98,-12,-62,36,87,58,-54,-127,-22,87, 
  /* [77][0][][] */ -63,127,-24,12,-58,-76,55,76,52,-67,-23,77,-25,46,-16,99, 
  /* [78][0][][] */ 127,37,-59,41,-80,42,-110,-11,-19,-24,-61,6,25,-80,31,44, 
  /* [79][0][][] */ -76,-65,127,80,-37,-101,-62,-37,-1,18,16,3,-64,120,-77,80, 
  /* [80][0][][] */ 57,124,31,-127,-2,50,89,-25,-1,18,-26,33,87,-45,11,-12, 
  /* [81][0][][] */ 52,-63,12,-111,66,70,-9,127,121,27,-21,-48,-19,36,-102,-87, 
  /* [82][0][][] */ 64,60,82,-18,127,-109,18,34,-10,106,-24,34,10,-56,23,-89, 
  /* [83][0][][] */ -41,84,36,18,100,48,127,110,0,68,-49,-53,-100,84,-33,-101, 
  /* [84][0][][] */ 5,-92,-4,127,-11,-85,-99,59,-90,68,-51,-27,-126,91,-4,-73, 
  /* [85][0][][] */ -81,67,-17,-23,-19,-31,-38,-48,-21,29,12,-47,-127,-83,-61,41, 
  /* [86][0][][] */ -21,73,102,93,23,-29,66,8,-5,5,-49,-68,21,84,-127,-64, 
  /* [87][0][][] */ -24,51,127,-32,-105,-18,24,7,42,-14,7,48,-45,24,-15,-1, 
  /* [88][0][][] */ 2,-69,-107,34,56,41,-23,33,-25,-83,-97,-86,127,-15,12,28, 
  /* [89][0][][] */ 19,20,24,-124,12,-64,-44,37,127,-15,21,-88,-3,-40,43,-72, 
  /* [90][0][][] */ 3,65,25,3,-35,35,46,98,11,-57,-18,127,54,3,-45,83, 
  /* [91][0][][] */ -72,0,-19,69,127,57,-41,-119,-65,34,26,37,-87,-113,-60,8, 
  /* [92][0][][] */ -32,74,12,-18,-127,-3,-85,47,-35,67,83,81,5,-14,52,12, 
  /* [93][0][][] */ 110,36,95,55,-127,-71,18,31,-12,-59,-23,-59,24,-62,6,-1, 
  /* [94][0][][] */ -34,-127,24,-118,24,24,-24,0,95,-14,-8,53,10,52,-63,54, 
  /* [95][0][][] */ -50,-80,-36,-56,125,127,-46,66,97,74,-86,56,-39,125,-81,38, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016638013767078519, 0.0015514084370806813, 0.0028143208473920822, 0.0034803166054189205, 0.0018950183875858784, 0.0013133120955899358, 0.0014458390651270747, 0.0020074713975191116, 0.0028588799759745598, 0.0017474949127063155, 0.0023347856476902962, 0.0018885034369304776, 0.0021414288785308599, 0.0028206759598106146, 0.0029815889429301023, 0.0022366717457771301, 0.0026942840777337551, 0.0011740386253222823, 0.0015866184839978814, 0.0023074413184076548, 0.0021884615998715162, 0.00088313681771978736, 0.0014410378644242883, 0.0023577648680657148, 0.0025156938936561346, 0.0022948249243199825, 0.0014945283764973283, 0.0021429536864161491, 0.0028407578356564045, 0.0019621802493929863, 0.0016736686229705811, 0.0021109580993652344, 0.0014728151727467775, 0.002872886136174202, 0.0025359061546623707, 0.0020146726164966822, 0.0023823906667530537, 0.0017244896152988076, 0.0017586395842954516, 0.0026347658131271601, 0.0024237723555415869, 0.0026215070392936468, 0.0031169194262474775, 0.0027287998236715794, 0.0036633862182497978, 0.0029875964391976595, 0.0020371659193187952, 0.0025400505401194096, 0.0028577244374901056, 0.0035686842165887356, 0.0021177462767809629, 0.0025494382716715336, 0.0024035002570599318, 0.0029474338516592979, 0.0029165430460125208, 0.0025747600011527538, 0.0027599052991718054, 0.002084450563415885, 0.0014137611724436283, 0.0027167059015482664, 0.0032844205852597952, 0.0017541556153446436, 0.0025092230644077063, 0.0024687042459845543, 0.0020402478985488415, 0.0016023583011701703, 0.0015564122004434466, 0.0027612932026386261, 0.0016441725892946124, 0.0029039219953119755, 0.0021474654786288738, 0.002213858300819993, 0.0022077197209000587, 0.0016284504672512412, 0.0026091826148331165, 0.0018429051851853728, 0.002601926214993, 0.0025866085197776556, 0.0023337246384471655, 0.0020596273243427277, 0.002085815416648984, 0.0023955591022968292, 0.0011136841494590044, 0.0025248555466532707, 0.0018569538369774818, 0.0023679761216044426, 0.0026862723752856255, 0.0035317814908921719, 0.0010626544244587421, 0.0022668251767754555, 0.0032313384581357241, 0.0029797558672726154, 0.0010491576977074146, 0.0021813346538692713, 0.0029607040341943502, 0.0018808759050443769, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -24708, -6557, 1779, -15630, 12956, -13158, 26457, -9403, 10147, -9739, 12691, 13724, -2236, -28050, 1518, 6030, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.7508564572781324e-05, 8.1469319411553442e-05, 5.4454601922770962e-05, 6.4112631662283093e-05, 9.6513562311884016e-05, 0.00014277575246524066, 5.0285729230381548e-05, 5.9459765907377005e-05, 0.00012988375965505838, 9.2247166321612895e-05, 0.00010186379222432151, 8.5743238741997629e-05, 9.2748239694628865e-05, 8.6263280536513776e-05, 9.2945592768955976e-05, 8.0182871897704899e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 18,34,2,12,-25,-76,-11,-12,-15,-81,14,-10,54,-68,50,31,-75,-32,32,19,83,27,-66,5,-5,61,127,66,16,76,59,-35,11,10,9,-17,31,29,-19,-3,104,19,13,-19,3,-1,-4,-34,27,-32,89,-11,-71,-3,46,29,-7,-53,11,27,-15,46,-61,-9,14,0,55,22,-7,-11,24,34,14,41,15,36,62,-24,38,28,-9,37,38,32,-50,14,-12,64,9,3,-99,-17,20,23,99,62, 
  /* [1][0][][] */ 16,26,-24,-14,10,-29,93,-59,-55,-21,-54,-22,1,-30,0,-51,-22,-31,-28,-12,-11,-75,92,-21,-4,6,-3,62,-51,11,-20,25,-35,33,19,2,-17,57,-44,70,36,11,9,-56,52,-56,6,26,-65,-4,47,-89,-31,44,52,50,27,38,-61,9,-33,-7,0,-21,41,20,83,22,-30,-127,3,0,22,52,-17,31,-60,-32,86,-25,42,-10,52,-55,-14,-50,-20,2,-16,-39,25,1,62,-67,-26,34, 
  /* [2][0][][] */ -5,-12,26,-12,65,40,-43,31,-51,43,18,-23,40,-3,25,29,42,-22,-127,2,-22,-41,-20,21,-4,-8,-45,18,-41,-14,-10,79,-8,-38,-3,18,-46,24,-25,-23,64,17,-7,50,17,64,12,-10,-79,8,-21,5,-17,57,17,-72,41,9,52,31,-23,-10,-13,49,38,2,-39,-1,-20,6,-18,-37,29,54,34,70,-61,-5,-29,-34,40,29,44,-8,-4,-43,-20,-56,-29,-28,-18,77,-1,-11,91,-30, 
  /* [3][0][][] */ 26,-45,-42,-118,-22,-27,124,-38,37,117,-77,-10,2,-24,-23,64,70,40,-29,36,-38,30,16,1,-42,79,54,3,-47,-12,-44,72,2,2,38,-14,3,-46,-32,64,13,15,-30,12,75,-50,-11,43,56,-36,35,-39,99,44,36,-8,-7,-35,-16,-39,-30,47,67,-12,-28,-18,118,-40,-42,0,-51,37,28,-60,16,-63,18,-41,127,-3,-4,-58,-23,-56,-27,-39,66,84,-60,37,-82,19,11,-75,-26,21, 
  /* [4][0][][] */ -20,70,43,22,-16,25,-35,-26,9,-27,-4,-9,22,44,-26,17,-20,-47,-22,-89,34,-24,-68,32,-30,-34,-33,21,-35,127,-63,-14,3,-32,4,-47,70,45,-27,-1,30,8,29,-52,-57,-13,66,-35,28,-22,-59,-3,-71,25,38,24,-4,77,-27,21,-28,-64,-19,1,59,20,-64,-3,4,-2,6,-68,-22,65,51,72,-39,18,-61,40,14,69,37,-71,41,-78,-30,-80,-36,-56,-50,-20,-7,3,43,-40, 
  /* [5][0][][] */ -13,-17,34,-22,-9,-15,-12,2,31,13,-11,3,-21,-24,20,-20,-11,4,-46,-27,-18,9,-15,7,22,-47,55,-15,-8,33,15,76,-6,-68,25,7,-35,-22,-23,1,-41,-5,-17,17,1,20,-64,17,-12,21,46,-5,25,-66,5,12,-15,-49,9,-30,41,16,25,44,-33,4,108,-20,2,-24,12,15,1,20,32,5,-11,-23,127,30,-15,-6,-25,23,40,60,3,80,-3,-27,-10,17,8,-23,-31,18, 
  /* [6][0][][] */ 36,-50,89,16,-52,124,-50,-97,-35,-68,-81,49,11,14,-40,81,1,40,15,-52,-108,-12,-97,-56,5,-49,-21,67,-114,48,-37,-33,38,74,-33,-12,5,-50,22,-22,-60,35,31,-29,18,41,-94,-15,52,13,-94,-127,84,8,-53,-32,20,-24,33,-13,-26,-25,51,11,52,-76,-77,-63,-126,13,-22,-89,-25,-103,1,-109,92,27,-89,47,-36,76,23,-93,59,-44,-16,-13,-71,86,-81,81,37,-45,79,-93, 
  /* [7][0][][] */ 5,-20,-55,60,-49,13,44,-6,-91,-1,77,55,2,-69,-14,-41,-2,5,-2,2,-59,-8,-46,-25,72,58,-19,63,-3,24,48,29,-54,-127,22,103,-18,0,-36,12,-21,-9,3,-88,30,54,64,87,-12,52,-46,4,36,-31,47,-64,-29,18,-64,-21,70,26,19,-29,77,-48,118,-29,-66,-6,72,-7,-22,-38,-93,-37,40,-30,106,-27,-6,-24,-72,-51,38,11,-79,34,-11,25,-7,39,61,-17,82,-9, 
  /* [8][0][][] */ -8,-58,3,2,-10,-4,14,-7,-3,-16,41,48,16,25,-39,-4,70,-2,13,6,0,-69,-36,-25,-23,-31,65,13,-28,43,20,-24,-16,6,5,4,-47,-15,17,-28,-10,39,27,-42,22,-20,17,-6,35,-6,41,11,-8,12,-36,4,-25,102,-62,-7,-4,-69,-58,-13,-83,-25,-18,19,4,15,32,-10,-22,-127,44,-100,4,12,-52,15,-27,-8,12,57,64,-57,-43,48,-25,79,13,-17,-39,0,-1,-63, 
  /* [9][0][][] */ -35,-24,-25,18,2,17,8,45,-40,-2,69,60,-32,49,36,-46,-13,32,-20,-37,7,38,-3,4,-29,23,11,18,27,-6,18,1,-8,-19,10,52,-18,1,17,-1,-3,-26,7,7,19,40,0,41,-39,12,-10,26,127,15,-15,-2,21,-15,37,9,-29,2,86,12,14,26,60,5,18,0,-16,27,14,-120,-31,-117,-28,-12,32,-3,-1,28,2,-40,47,17,-58,-1,-14,105,38,26,58,42,-13,29, 
  /* [10][0][][] */ 18,47,12,-4,-23,18,-37,-16,59,13,-27,21,12,12,1,-47,-31,2,22,-5,20,-9,-20,-29,15,-21,-94,41,-22,56,-10,8,20,24,-22,6,17,8,1,2,47,-10,52,-39,-22,-5,22,30,20,6,12,-33,-20,-16,-2,29,-9,14,-14,-6,-11,-36,-4,11,5,-13,-92,-29,-57,-24,43,-15,-14,30,33,14,52,-18,-92,12,-9,33,-3,-6,10,16,-67,-127,-29,24,11,24,52,-25,16,29, 
  /* [11][0][][] */ 21,-28,-1,8,-60,24,17,6,61,-18,-18,-45,25,9,7,-9,-27,49,20,-68,0,37,9,-20,31,17,62,-8,37,-49,-40,10,22,87,-106,11,23,-14,53,6,-54,43,-25,13,-45,5,-16,-5,43,-16,-33,-23,-17,12,-71,80,-22,-3,3,-23,14,13,-8,-60,-11,-41,-127,-76,-15,-19,-93,26,48,16,-10,-3,41,64,-117,-34,-15,-8,-15,6,-19,0,58,72,13,-43,14,-3,-32,39,83,33, 
  /* [12][0][][] */ 11,28,-35,-27,19,-23,14,30,41,-26,23,-3,-1,-10,-10,11,7,-45,-24,12,-4,54,8,58,-38,-41,-127,-9,67,-27,12,-1,-18,-82,62,-13,33,-5,0,24,6,-57,19,35,34,-6,33,-24,-61,3,-49,95,65,-20,23,-90,21,24,-34,-21,2,47,73,14,-19,-20,28,32,126,12,28,23,4,-19,-22,-10,-35,-61,40,-65,27,-46,26,-29,3,7,8,-106,-10,28,-36,15,7,51,10,43, 
  /* [13][0][][] */ -14,10,-61,23,16,20,-7,6,25,55,-30,39,-42,-24,56,-47,20,50,54,23,-31,-39,0,15,37,49,-24,21,2,31,48,-12,-7,58,1,34,15,-38,-41,-40,1,-9,13,21,49,43,-28,38,-37,41,6,3,-15,-34,54,27,20,-48,-5,-12,20,14,8,-21,6,79,127,30,32,9,-37,-19,26,45,-80,40,16,-70,121,-35,-10,-34,23,1,24,48,-30,-28,-15,-21,3,46,32,3,53,57, 
  /* [14][0][][] */ -9,56,10,16,-69,-50,19,37,-63,-28,67,17,-79,-10,63,-17,-30,32,-54,33,-22,23,-93,2,-51,-2,-57,-113,6,0,37,73,-48,29,15,-4,-26,-75,-14,-34,16,-34,32,-19,-2,48,-79,35,-7,-37,78,13,-13,41,-23,26,-56,16,5,41,36,60,-10,44,18,-42,1,-74,22,71,75,31,-49,33,12,8,35,-2,32,28,-59,102,-8,-127,76,4,-6,2,-105,-14,-33,1,-25,20,29,39, 
  /* [15][0][][] */ 83,-34,35,36,46,12,-15,-12,10,42,-57,-27,67,72,-15,-15,-19,11,-79,38,-10,-29,22,36,62,-29,84,18,50,-30,-63,52,58,42,-14,-85,64,59,76,47,85,35,-12,11,-52,-127,45,-44,-38,-21,-27,-4,-10,-54,-33,49,0,13,-12,23,-8,-45,-41,37,31,37,-77,35,-6,-42,-16,-18,0,-115,-51,-100,-19,26,-119,30,72,-34,37,28,-62,-5,6,-11,49,83,30,-73,-36,-31,42,-27, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0032941137906163931, 0.0034624461550265551, 0.002314320532605052, 0.0027247867546975613, 0.0041018263436853886, 0.0060679693706333637, 0.0021371433977037668, 0.0025270399637520313, 0.0055200597271323204, 0.0039205043576657772, 0.0043292110785841942, 0.0036440875846892595, 0.0039417999796569347, 0.0036661892663687468, 0.0039501874707639217, 0.0034077719319611788, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7848, -558, -6126, 7335, -1430, -641, 1336, -1196, 3211, -3332, 1913, -1996, 9736, -3583, -1434, -4883, 419, 442, -10014, -40, -2174, 1768, -6635, -2028, 1, 6576, -9276, -4705, 1706, -2815, 553, -379, 14520, -115, -494, 887, -2103, 10575, 1614, 9063, 1501, 5577, -138, 4426, 1123, 655, 11404, 1764, -3932, -182, -3340, -273, -1043, -2602, 124, 2258, -2630, 4104, -29, -755, -1947, -1632, -991, 5998, 12133, 2739, 13682, 16214, -1812, -88, 7782, -462, -432, 2306, -1502, 776, 20549, 11417, 9255, 10081, 13921, -1712, 9541, 7983, 753, -1611, 7938, -6792, 12030, 845, -5820, 2076, -498, 79, 17434, -799, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.0001242024009115994, 0.00027285510441288352, 0.00016925304953474551, 0.00019992231682408601, 0.00021629429829772562, 0.00044865495874546468, 0.0001137986037065275, 0.00022522150538861752, 0.00036109212669543922, 0.00030209057149477303, 0.00026754953432828188, 0.00021835684310644865, 9.048220090335235e-05, 0.00012777124356944114, 0.00021087599452584982, 0.00025938238832168281, 0.00024153459526132792, 0.00042264637886546552, 0.00013679219409823418, 0.00031056307489052415, 0.00023130392946768552, 0.00022977581829763949, 0.00017296415171585977, 0.00017154763918370008, 0.0040790112689137459, 0.00019438988238107413, 0.00023386033717542887, 0.00013896271411795169, 0.0003029241634067148, 0.00015395101218018681, 0.00016764282190706581, 0.00032349181128665805, 8.722266647964716e-05, 0.000488203892018646, 0.00013391446555033326, 0.00019599375082179904, 0.00034395826514810324, 9.3039365310687572e-05, 0.0003183474182151258, 7.67867750255391e-05, 0.00062433449784293771, 0.00021584027854260057, 0.00028104192460887134, 0.00015901017468422651, 0.00023191426589619368, 0.00030710556893609464, 0.00017651419329922646, 0.00034642065293155611, 0.00023262428294401616, 0.00048899761168286204, 0.00022457836894318461, 0.00018495001131668687, 0.00016094684542622417, 0.00032629378256388009, 0.00037111763958819211, 0.00026762162451632321, 0.0001538255310151726, 0.00050301256123930216, 0.00050997926155105233, 0.00052988133393228054, 0.00032682891469448805, 0.00032599468249827623, 0.00017604154709260911, 0.0001360010210191831, 0.00020508711168076843, 0.00032175975502468646, 0.00012065545888617635, 0.00010043475776910782, 0.00025969871785491705, 0.00047074950998649001, 0.00012063862959621474, 0.00028791264048777521, 0.00035554030910134315, 0.00019064020307268947, 0.00017864406981971115, 0.00021809971076436341, 5.6763175962259993e-05, 0.00016215721552725881, 0.00015183455252554268, 0.00013127645070198923, 6.1264443502295762e-05, 0.00031639079679735005, 9.9259748822078109e-05, 0.0003253602480981499, 7.4714174843393266e-05, 0.00036455248482525349, 0.0001503683888586238, 0.00022234403877519071, 0.00010593242041068152, 0.0002263614151161164, 0.00017623711028136313, 0.00024380498507525772, 0.00043929810635745525, 0.00019068161782342941, 0.00012393396173138171, 0.00028462999034672976, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -41,-8,-4,-32,100,2,23,-17,-8,-1,-18,-29,-28,4,-7,-25,-19,4,-14,-14,-10,24,32,54,-1,-5,-21,2,17,11,20,4,-19,-1,-16,-39,8,-52,-31,25,-7,-4,39,-31,-23,35,-70,-23,-35,8,-3,51,-55,-1,24,-13,10,-18,7,-6,4,-10,-11,-28,-22,-33,-49,-56,-18,28,-10,-4,52,1,-13,-7,-43,4,127,-37,-113,6,-127,-16,-31,-24,15,17,-75,-20,-4,-53,-6,40,-28,9, -23,40,80,-84,-35,5,127,-42,-7,-17,-44,10,-71,6,-94,63,-13,67,78,-27,-10,127,115,118,29,1,38,74,127,51,127,-21,-72,-22,-75,-42,-12,-57,127,-30,-33,-127,-6,-47,60,-35,-39,-6,43,2,26,127,-93,27,-85,-5,-92,-13,-4,29,-1,-127,-114,-36,-59,-12,-5,-95,-14,16,-67,106,-127,-24,2,-34,-120,-84,-8,-105,-96,12,-7,-42,117,74,-45,40,-127,-4,8,-23,10,127,-72,-88, -50,7,-1,-17,72,2,28,-25,-26,14,-17,-2,-4,1,-6,-34,-15,-2,-6,-20,-11,6,44,46,-1,1,5,-8,-1,18,3,17,-3,-1,-26,57,6,-54,-26,42,-11,-7,28,-21,-28,-38,-52,-24,-25,-3,-2,34,0,-21,8,-10,77,-23,14,-17,1,-6,-45,-5,-30,-45,127,-39,-8,28,-5,5,22,-6,-1,10,-18,26,-50,-17,-51,4,-127,-14,2,-35,14,-18,-89,-40,-12,36,5,38,-23,13, 
  /* [0][1][][] */ -78,-10,51,-44,49,111,-42,-15,-5,-21,-33,-23,-122,28,18,63,-12,37,107,20,20,-27,127,-16,38,16,57,2,-17,1,-3,-21,-127,-11,50,-27,3,-127,-66,-127,-23,-9,78,-15,-72,127,-94,-79,61,73,19,-52,-106,82,61,-29,47,-36,35,1,19,6,89,-64,-41,4,-26,-91,1,-6,-127,4,93,127,3,-76,-127,-72,-65,-47,-104,-4,-17,-59,36,23,-97,69,-82,127,96,-99,127,12,-42,-11, 60,127,127,127,-127,-127,125,-46,127,127,-85,-59,-99,127,-23,127,127,-127,127,127,127,-96,118,-127,-127,-127,127,127,-119,127,-11,127,-81,127,127,-107,127,87,9,-39,127,2,-127,-83,127,-18,127,127,127,-127,127,-122,111,127,-127,127,-127,127,-127,127,-88,121,102,-127,127,127,-16,127,-104,-127,-12,-127,18,109,127,74,26,-127,84,-127,16,127,124,127,127,75,-127,127,-77,50,-9,-25,-83,-27,-127,-33, -127,-33,47,-56,18,66,-61,12,-45,-16,-7,127,-127,28,23,48,-20,48,67,5,18,-29,81,-14,37,4,54,-1,-18,-9,20,-17,-111,-28,67,127,10,-78,-77,-72,-32,-22,17,-27,-64,-69,-90,-98,30,77,-7,-32,127,-5,91,-45,122,-36,52,-33,8,-19,-127,-51,-74,-22,-57,-90,-11,3,-86,-9,39,-107,10,127,-75,-42,-58,9,-127,-14,-60,-80,6,34,-66,42,-58,-84,127,127,-38,-19,-66,-13, 
  /* [0][2][][] */ 0,-47,-24,-32,42,2,-23,17,-10,-6,25,-35,46,13,-9,-43,-6,-7,-41,-28,-11,-17,6,-5,5,-3,-24,8,-10,-15,-34,1,17,0,-7,-38,3,-59,-8,-36,-32,-3,27,16,6,8,-67,-3,-46,3,-20,-13,2,-36,27,-12,48,-25,6,-5,6,22,2,5,-55,-34,119,-7,39,23,-9,-4,0,-21,-24,-27,-8,6,-39,-11,-25,7,-92,-19,-19,-1,40,-15,5,-7,20,-33,-11,-9,-13,-8, -7,-61,24,-110,-34,-8,41,127,-63,65,127,-22,-54,33,127,75,-11,-37,92,-54,-15,-46,118,27,17,-20,47,25,-24,-8,-83,-47,-61,-28,-91,-11,-71,-95,53,-98,-28,-108,-36,127,16,-27,-51,6,22,-11,-8,-9,61,43,-46,-43,-32,-57,38,-37,127,26,106,-1,-102,-64,-19,-83,127,24,-43,12,32,-34,12,-29,-23,-47,-2,52,-112,-19,-69,-72,38,-127,-6,17,-38,-4,48,-10,10,-111,-59,127, -12,5,-17,-8,39,-8,-17,22,-24,-3,9,46,48,16,-7,-45,-6,8,-17,-30,0,-12,-11,15,-4,-5,4,2,-16,-2,-40,-4,18,3,-6,-2,-1,-77,-18,-4,-36,-17,1,7,-2,-13,-77,6,-37,-6,-11,-5,0,-40,29,-10,84,-20,9,-13,14,20,-4,12,-48,-36,-32,7,37,13,3,-6,-44,-41,-20,-18,-15,9,94,1,-31,1,-59,-17,-9,9,51,6,-22,-1,13,10,0,-13,-6,-14, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0052786017768085003, 0.011596341617405415, 0.0071932547725737095, 0.0084966979920864105, 0.0091925077140331268, 0.019067835062742233, 0.0048364405520260334, 0.0095719136297702789, 0.015346415340900421, 0.012838848866522312, 0.011370855383574963, 0.0092801656574010849, 0.00384549330919981, 0.0054302774369716644, 0.0089622298255562782, 0.011023751460015774, 0.010265219956636429, 0.017962470650672913, 0.0058136680163443089, 0.013198930770158768, 0.0098304171115159988, 0.0097654722630977631, 0.00735097611322999, 0.0072907744906842709, 0.17335797846317291, 0.0082615697756409645, 0.0099390642717480659, 0.0059059150516986847, 0.012874276377260685, 0.0065429178066551685, 0.0071248197928071022, 0.013748401775956154, 0.0037069632671773434, 0.020748665556311607, 0.005691364873200655, 0.008329734206199646, 0.014618225395679474, 0.0039541730657219887, 0.013529764488339424, 0.0032634378876537085, 0.026534214615821838, 0.0091732116416096687, 0.011944281868636608, 0.0067579322494566441, 0.0098563563078641891, 0.013051986694335938, 0.0075018531642854214, 0.014722877182066441, 0.0098865320906043053, 0.02078239805996418, 0.0095445802435278893, 0.0078603755682706833, 0.0068402406759560108, 0.013867485336959362, 0.015772499144077301, 0.011373919434845448, 0.0065375850535929203, 0.021378032863140106, 0.021674118936061859, 0.022519957274198532, 0.013890228234231472, 0.013854773715138435, 0.0074817654676735401, 0.0057800435461103916, 0.0087162023410201073, 0.013674789108335972, 0.0051278569735586643, 0.0042684772051870823, 0.011037195101380348, 0.020006854087114334, 0.0051271417178213596, 0.012236286886036396, 0.01511046290397644, 0.0081022083759307861, 0.0075923725962638855, 0.0092692375183105469, 0.0024124349001795053, 0.0068916818127036095, 0.0064529683440923691, 0.0055792490020394325, 0.0026037388015538454, 0.013446608558297157, 0.004218539223074913, 0.013827810063958168, 0.0031753522343933582, 0.015493480488657951, 0.0063906563445925713, 0.0094496216624975204, 0.0045021278783679008, 0.0096203600987792015, 0.007490077055990696, 0.010361711494624615, 0.01867016963660717, 0.0081039685755968094, 0.005267193540930748, 0.012096774764358997, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 949, 3252, 209, 1071, 2659, 8359, -41, 1811, 16976, -867, 17049, 3391, 1432, 481, 4442, 374, 1267, 2247, -75, 6576, 521, 5815, -1083, 1131, -8214, 1006, 1339, 1226, 3138, 1068, 2650, 2533, 1150, 7555, 2858, 3058, 2267, 1447, 2690, 1518, 14399, 878, 1550, 928, 2036, 5962, 5844, 9137, 1110, -361, 1015, 4090, 1699, -2626, 4849, 30, 1902, 7705, 993, 2065, 1833, 7357, 2145, -139, 7129, 11859, 1200, 2310, 4340, 3876, 1236, 839, -3057, 3111, 1667, 2336, 124, 7864, 2605, 5122, 2338, 633, 3260, 4959, 112, 7188, 3648, 986, -317, 1662, 543, 9244, 2270, 2867, 3161, 2777, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00038734445115551353, 0.00023937950027175248, 0.00037276957300491631, 0.00035231272340752184, 0.00021317445498425514, 0.00010960955114569515, 0.00028331359499134123, 0.00020138289255555719, 5.6377994042122737e-05, 0.00020641162700485438, 5.2175673772580922e-05, 0.00014554982772096992, 0.0002402070676907897, 0.00042153141112066805, 0.0001325074554188177, 0.00019287389295641333, 0.00046592066064476967, 0.00027941487496718764, 0.00024117709835991263, 0.00013230237527750432, 0.00040595780592411757, 0.00013358634896576405, 0.0002399924851488322, 0.00023569990298710763, 9.1696747404057533e-05, 0.00018785244901664555, 0.00033790792804211378, 0.00031141575891524553, 0.00027585725183598697, 0.00028458249289542437, 0.00020270708773750812, 0.00021130035747773945, 0.00033156899735331535, 0.00011535939847817644, 0.0001858052855823189, 0.00020941643742844462, 0.00024457721156068146, 0.00027317521744407713, 0.00018271683074999601, 0.00024898297851905227, 6.6087413870263845e-05, 0.00032369350083172321, 0.00024006198509596288, 0.00020392272563185543, 0.00017112828209064901, 0.00014598882989957929, 0.00011989206541329622, 8.9152446889784187e-05, 0.00027483433950692415, 0.00059487274847924709, 0.00039818554068915546, 0.00017039764497894794, 0.00027654730365611613, 0.0001572001347085461, 0.00015523766342084855, 0.00042878545355051756, 0.00017521918925922364, 0.00011697122681653127, 0.00023660380975343287, 0.00012730083835776895, 0.00023817621695343405, 0.00012306209828238934, 0.00028114323504269123, 0.00034775858512148261, 0.00013228008174337447, 7.9059347626753151e-05, 0.00037572550354525447, 0.0002796178450807929, 0.00016753918316680938, 0.00014137140533421189, 0.00033902082941494882, 0.00024900425341911614, 0.0001980017259484157, 0.0002086315507767722, 0.00019774893007706851, 0.00027821402181871235, 0.00023418836644850671, 0.00010717803525039926, 0.00023543406859971583, 0.00015345975407399237, 0.00017402564117219299, 0.00030055581009946764, 0.00015139608876779675, 0.00018842391727957875, 0.00013603342813439667, 0.00010183339327340946, 0.00019802624592557549, 0.0003949534147977829, 0.00041458223131485283, 0.00035441259387880564, 0.00026453248574398458, 9.570593829266727e-05, 0.00022732117213308811, 0.0001563803234603256, 0.00016273373330477625, 0.00024181058688554913, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 27,11,-9,49,-127,-19,80,49,46,76,-16,25,0,1,25,77, 
  /* [1][0][][] */ -18,29,-80,10,127,91,-4,6,-11,4,-61,30,-62,77,-42,-47, 
  /* [2][0][][] */ -41,63,71,-9,65,86,8,30,33,-1,34,-22,42,-127,-14,12, 
  /* [3][0][][] */ 127,-16,24,6,22,25,-9,18,38,27,-46,-17,-42,54,-29,50, 
  /* [4][0][][] */ -64,-13,9,42,-106,3,-72,-45,-17,22,-30,-67,-3,29,-27,127, 
  /* [5][0][][] */ -99,11,43,13,127,38,20,13,-53,17,-34,20,-40,72,-92,-24, 
  /* [6][0][][] */ -127,22,-37,28,-21,-72,77,14,4,-34,-46,39,14,7,-33,20, 
  /* [7][0][][] */ 2,94,54,-72,71,49,127,18,32,-8,7,62,85,28,-16,10, 
  /* [8][0][][] */ -32,-28,-56,68,-48,87,-46,-72,32,-37,95,52,122,62,-127,-10, 
  /* [9][0][][] */ -36,-127,-24,74,-54,-74,-26,66,48,67,14,72,-92,7,-6,-30, 
  /* [10][0][][] */ -41,-50,-85,64,-100,127,53,-75,-1,-67,53,-43,52,107,-82,91, 
  /* [11][0][][] */ -23,-127,-41,45,-2,70,33,11,12,22,48,-86,10,110,-116,93, 
  /* [12][0][][] */ -24,-78,-82,84,-116,-127,34,74,72,73,-19,105,-7,-72,-19,-14, 
  /* [13][0][][] */ -67,-19,-39,-5,-12,6,30,13,-22,127,-14,-22,38,29,12,-5, 
  /* [14][0][][] */ -127,-21,-55,-51,-24,126,-20,-110,126,-83,103,0,118,-65,-99,-88, 
  /* [15][0][][] */ 7,-127,99,-56,-52,-41,3,60,20,-48,-98,-43,81,-41,-25,-52, 
  /* [16][0][][] */ -25,-25,21,-46,21,30,-20,-19,53,-127,40,-16,-5,-5,-73,-77, 
  /* [17][0][][] */ -15,13,31,-63,4,-10,-49,20,95,-58,49,85,102,-75,-13,-127, 
  /* [18][0][][] */ 86,2,-26,-103,12,-38,112,-36,35,63,2,62,-10,69,7,-127, 
  /* [19][0][][] */ -37,-38,-43,-76,-92,57,-7,-22,30,-23,10,-127,7,-19,-35,-8, 
  /* [20][0][][] */ 16,78,75,-100,54,-5,-41,87,-114,-126,43,-90,-26,127,-12,-9, 
  /* [21][0][][] */ 0,-122,-127,4,113,31,90,99,-72,-75,-35,26,109,-85,-33,18, 
  /* [22][0][][] */ 65,-18,65,1,8,3,57,39,23,112,35,28,-3,7,127,-2, 
  /* [23][0][][] */ -127,-71,1,80,73,27,19,5,-9,19,-13,-104,4,80,71,122, 
  /* [24][0][][] */ 22,-10,40,34,22,-98,17,-62,29,127,-111,73,-18,-74,85,-79, 
  /* [25][0][][] */ 104,-54,94,127,25,5,-31,39,-120,83,66,-43,-22,35,80,-6, 
  /* [26][0][][] */ -22,30,15,40,-55,121,-14,38,-63,-38,-82,35,4,28,39,-127, 
  /* [27][0][][] */ 29,2,-13,-49,-45,7,-79,10,-99,-24,-62,-47,-74,35,-18,127, 
  /* [28][0][][] */ -71,10,18,-6,14,-16,-127,10,-10,-33,-3,-9,15,-51,-65,-33, 
  /* [29][0][][] */ -35,-119,-30,98,-34,11,127,10,77,47,-108,61,28,-32,-52,81, 
  /* [30][0][][] */ 45,-68,-87,3,-127,22,43,-36,-1,23,-4,-29,2,44,3,80, 
  /* [31][0][][] */ -127,-26,1,86,-36,7,-48,-6,-24,-52,-3,-40,-18,-57,-19,87, 
  /* [32][0][][] */ -98,-82,-73,12,-78,-63,-14,7,127,55,-41,-60,21,40,39,-35, 
  /* [33][0][][] */ -15,6,-89,32,-123,-92,62,-14,-127,27,-65,-62,-12,103,62,71, 
  /* [34][0][][] */ 30,50,-10,45,-62,-37,31,20,8,-127,-6,35,-29,-2,34,101, 
  /* [35][0][][] */ 30,-10,-50,-23,-127,4,84,-32,24,57,-8,-16,9,62,26,63, 
  /* [36][0][][] */ 3,-4,-36,55,127,-27,41,64,-65,15,-79,-65,21,-19,11,15, 
  /* [37][0][][] */ -102,55,6,-61,30,-99,-44,-27,-2,-21,-8,61,47,-54,28,-127, 
  /* [38][0][][] */ 37,78,40,-56,-68,-64,-127,-33,-18,-44,33,52,-75,-96,83,-19, 
  /* [39][0][][] */ 11,-49,9,77,16,65,70,-33,-19,45,21,-17,3,127,56,101, 
  /* [40][0][][] */ 112,32,78,102,-48,-67,-10,38,-75,70,-2,-18,-36,-25,127,-4, 
  /* [41][0][][] */ -14,-9,14,55,-90,107,6,54,-48,30,-97,18,26,36,57,-127, 
  /* [42][0][][] */ 15,-92,35,-13,127,23,60,14,-24,-79,-82,-19,-16,-3,-15,22, 
  /* [43][0][][] */ -41,-110,-74,1,127,19,14,111,-93,-97,-115,-61,107,4,-73,61, 
  /* [44][0][][] */ -38,-52,-76,-105,30,78,48,-4,-24,-127,-85,89,-41,58,44,118, 
  /* [45][0][][] */ -15,-51,-52,-14,-127,50,-43,-63,47,-31,14,-50,-28,-7,-22,28, 
  /* [46][0][][] */ 43,-47,-1,0,51,-95,-4,84,4,-26,40,58,-39,-36,64,-127, 
  /* [47][0][][] */ -104,-27,-25,72,-26,27,52,25,-16,120,60,73,-34,87,-26,127, 
  /* [48][0][][] */ 43,-4,-87,-100,30,-64,11,62,46,-84,0,19,-63,7,-48,-127, 
  /* [49][0][][] */ 42,31,2,27,-13,-15,49,37,-40,127,-33,32,-27,-26,68,89, 
  /* [50][0][][] */ -2,-6,5,4,-127,-8,-3,-48,41,11,20,47,-12,-54,9,8, 
  /* [51][0][][] */ 23,8,6,-127,-18,73,32,-59,19,20,19,-56,55,62,-16,-2, 
  /* [52][0][][] */ 24,-30,9,-82,87,-115,-13,-35,41,2,127,-52,39,8,-29,96, 
  /* [53][0][][] */ -68,-61,49,-39,-44,-127,27,-124,-12,107,-114,80,-37,-11,18,-82, 
  /* [54][0][][] */ 65,60,47,-14,-127,-46,-106,-101,-4,35,57,69,-91,-53,73,-4, 
  /* [55][0][][] */ 14,4,-22,76,-35,14,33,-10,8,127,16,55,8,10,3,34, 
  /* [56][0][][] */ 30,-127,-85,96,-60,40,-2,48,109,7,59,69,-12,-13,51,119, 
  /* [57][0][][] */ 51,29,75,-70,57,-9,-6,9,71,-44,36,127,67,-29,101,-46, 
  /* [58][0][][] */ 79,-50,2,-62,26,14,10,127,43,79,16,78,66,44,83,12, 
  /* [59][0][][] */ -37,32,42,-51,15,-87,-4,12,22,30,-127,-99,-116,-62,78,-27, 
  /* [60][0][][] */ 41,-24,37,15,12,-22,11,-44,30,127,-9,59,-9,-33,-14,-40, 
  /* [61][0][][] */ 64,49,9,-19,-80,-127,-28,-58,-50,-21,-24,5,-64,-53,97,89, 
  /* [62][0][][] */ -25,81,-41,29,-60,127,-61,23,-56,19,-38,43,-32,36,68,-91, 
  /* [63][0][][] */ 26,-8,-61,-127,-7,-40,83,-17,-1,-88,-36,25,-39,66,25,-33, 
  /* [64][0][][] */ -29,19,7,-7,49,-76,11,99,-127,-17,-60,-28,-41,105,70,66, 
  /* [65][0][][] */ -57,-1,-53,-5,55,24,-52,-60,-127,-63,19,-13,-124,106,-49,56, 
  /* [66][0][][] */ -19,62,-11,32,-41,127,-27,21,-62,23,-36,36,-30,40,44,-86, 
  /* [67][0][][] */ 12,-19,-41,-26,16,-81,63,-82,-12,26,24,127,-58,-6,-28,-107, 
  /* [68][0][][] */ -19,-127,-32,56,-22,-1,5,85,32,42,47,21,-59,38,-4,-1, 
  /* [69][0][][] */ 23,108,77,-116,32,-22,-32,122,23,99,87,116,101,-63,42,-127, 
  /* [70][0][][] */ 60,32,46,-25,98,-7,-108,-40,-127,-105,14,61,-37,69,-87,-8, 
  /* [71][0][][] */ -14,-60,44,-55,65,-19,39,19,-84,87,-127,-34,-2,73,-24,34, 
  /* [72][0][][] */ 17,24,54,18,-61,-20,-100,-56,-20,55,-1,65,35,127,-112,8, 
  /* [73][0][][] */ 4,-32,-26,-39,33,-120,30,-49,73,98,118,-11,17,-34,-68,127, 
  /* [74][0][][] */ 3,-8,-28,82,-90,-7,86,28,66,62,29,117,127,35,-52,12, 
  /* [75][0][][] */ -28,51,-35,40,-65,127,-21,24,-34,24,-30,39,-26,42,37,-66, 
  /* [76][0][][] */ -58,96,-64,75,-127,-18,-16,43,61,26,-35,-32,75,-49,-117,45, 
  /* [77][0][][] */ 109,94,-111,127,61,63,60,55,49,17,114,-32,73,37,73,14, 
  /* [78][0][][] */ 6,-43,-1,-65,61,-118,33,-56,43,39,115,-26,17,-21,-43,127, 
  /* [79][0][][] */ -30,56,8,35,3,-61,-43,6,-127,-9,62,12,108,49,-66,-54, 
  /* [80][0][][] */ -93,19,69,-26,46,55,1,-127,-87,52,-66,-43,-13,-86,13,70, 
  /* [81][0][][] */ 95,72,-23,1,38,-32,82,121,-107,127,-70,-38,-48,32,118,118, 
  /* [82][0][][] */ 70,127,-19,-69,-33,-81,104,-85,44,17,-59,87,105,-30,97,-70, 
  /* [83][0][][] */ 7,-38,20,24,11,36,-18,-92,60,-30,108,22,38,-54,-59,-127, 
  /* [84][0][][] */ -127,-76,-49,-20,-14,99,83,8,77,51,102,89,45,69,-76,12, 
  /* [85][0][][] */ 106,14,94,-72,73,-10,-28,67,10,127,-56,16,-38,61,113,23, 
  /* [86][0][][] */ -70,72,-32,1,26,79,14,24,99,30,127,-10,-32,53,-5,-28, 
  /* [87][0][][] */ 11,-57,25,-49,40,-127,33,-35,44,-15,68,-37,38,-36,-45,74, 
  /* [88][0][][] */ -97,54,41,-31,101,-32,48,19,-65,-75,105,-68,65,122,98,-127, 
  /* [89][0][][] */ -30,38,-4,33,-30,127,-24,36,-45,11,-40,23,0,69,26,-81, 
  /* [90][0][][] */ 39,-62,19,13,120,4,53,14,-25,-86,-127,-13,11,-9,-72,43, 
  /* [91][0][][] */ -26,74,-48,-59,-8,-55,-107,35,-83,13,-92,-119,-127,-103,-9,34, 
  /* [92][0][][] */ 56,55,55,19,-127,-77,16,2,-31,39,-14,-21,-34,-84,28,4, 
  /* [93][0][][] */ -12,-127,-112,57,-41,-63,-21,113,83,75,8,75,-57,81,-23,-27, 
  /* [94][0][][] */ 115,11,108,-15,15,-39,17,49,21,71,7,59,17,15,127,-6, 
  /* [95][0][][] */ -50,-42,-36,-19,127,12,55,83,-47,-21,-82,-42,28,26,-80,37, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0052578146569430828, 0.0032493378967046738, 0.0050599751994013786, 0.0047822939231991768, 0.0028936306480318308, 0.0014878403162583709, 0.0038456995971500874, 0.0027335719205439091, 0.00076527503551915288, 0.0028018320444971323, 0.000708232750184834, 0.0019756937399506569, 0.003260571276769042, 0.0057218684814870358, 0.0017986565362662077, 0.0026180706918239594, 0.0063244081102311611, 0.0037927781231701374, 0.0032737385481595993, 0.0017958726966753602, 0.0055104722268879414, 0.0018133014673367143, 0.0032576585654169321, 0.0031993910670280457, 0.0012446918990463018, 0.002549909520894289, 0.0045867632143199444, 0.004227158147841692, 0.0037444871850311756, 0.003862923476845026, 0.0027515464462339878, 0.002868191571906209, 0.0045007183216512203, 0.0015658887568861246, 0.0025221214164048433, 0.0028426193166524172, 0.0033198916353285313, 0.0037080810870975256, 0.0024801986292004585, 0.0033796955831348896, 0.00089707068400457501, 0.0043938164599239826, 0.0032586019951850176, 0.0027680476196110249, 0.002322895685210824, 0.001981652807444334, 0.0016274151857942343, 0.0012101555475965142, 0.0037306018639355898, 0.0080748042091727257, 0.0054049715399742126, 0.0023129780311137438, 0.0037538537289947271, 0.002133835107088089, 0.0021071964874863625, 0.0058203348889946938, 0.0023784257937222719, 0.0015877677360549569, 0.0032116607762873173, 0.001727981842122972, 0.0032330045942217112, 0.0016704451991245151, 0.0038162388373166323, 0.0047204759903252125, 0.001795570133253932, 0.0010731518268585205, 0.00510009890422225, 0.0037955332081764936, 0.0022741772700101137, 0.0019189757294952869, 0.0046018697321414948, 0.0033799845259636641, 0.002687675878405571, 0.0028319652192294598, 0.0026842444203794003, 0.00377647764980793, 0.0031788735650479794, 0.0014548349427059293, 0.003195782657712698, 0.0020830631256103516, 0.0023622245062142611, 0.0040797451511025429, 0.0020550508052110672, 0.002557666739448905, 0.0018465180182829499, 0.0013822867767885327, 0.002688008826225996, 0.0053610987961292267, 0.0056275404058396816, 0.0048107975162565708, 0.0035907647106796503, 0.0012991126859560609, 0.0030856581870466471, 0.0021227069664746523, 0.0022089481353759766, 0.003282337449491024, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4373, 10222, -18306, 2574, 11735, -13719, -38736, -8842, -5769, 7697, -16073, -12370, 4703, -12955, -3017, -867, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00018370704492554069, 0.00017791715799830854, 0.00015714076289441437, 0.00016943442460615188, 0.0001429829717380926, 0.00015337375225499272, 0.00011351236025802791, 0.00013947278785053641, 8.0877354776021093e-05, 0.00011713076673913747, 0.00020416438928805292, 0.00018211459973827004, 0.00013218157982919365, 7.3598472226876765e-05, 0.00014380671200342476, 0.00014224147889763117, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 23,36,26,-34,69,63,-33,51,-11,111,4,39,-33,35,-9,46,31,78,34,-65,-60,80,-7,42,64,44,33,51,-42,-51,-13,85,-20,15,-72,57,44,-127,-31,16,16,-23,58,0,-9,-49,-58,-18, 
  /* [1][0][][] */ -53,8,-78,-45,9,90,-59,18,-8,-37,-41,34,56,-14,-35,-30,-28,-27,-3,20,-63,46,-98,-40,-50,-33,49,66,-21,-31,41,-42,13,-54,-28,54,12,-54,127,-32,-22,28,-41,-15,32,51,25,26, 
  /* [2][0][][] */ -4,3,54,-30,-19,-78,26,20,101,70,-57,18,111,-48,127,73,-62,-16,-24,23,87,-75,-39,-101,8,-35,24,-64,39,46,-40,15,29,-25,46,34,-66,16,0,-32,28,33,59,-8,21,-77,90,-58, 
  /* [3][0][][] */ 36,-1,-25,-19,25,105,23,-12,44,-48,27,-30,-50,10,9,44,-41,-64,29,-127,-1,2,-17,-19,-38,83,118,59,-11,-44,25,44,59,-17,95,29,-42,-59,2,40,24,19,-20,0,28,23,-7,-33, 
  /* [4][0][][] */ 92,-13,3,-49,79,79,41,3,62,-8,-108,24,32,-16,14,-11,-96,-115,-23,-82,-27,19,-31,-26,-78,127,-88,114,-56,-59,18,67,39,-60,16,-26,-4,10,-20,30,-48,-15,2,39,-45,91,-23,-47, 
  /* [5][0][][] */ -1,-2,-60,5,-20,58,15,-24,63,50,37,88,50,-20,32,-7,-43,127,-16,34,10,-5,-63,-11,32,0,-62,-38,-18,28,23,-15,-42,-4,45,13,-47,10,-85,3,85,-24,23,46,-12,9,-40,32, 
  /* [6][0][][] */ 71,13,13,74,5,-24,105,-61,-2,61,127,108,43,40,-43,67,38,-48,-84,87,46,-68,-47,56,-91,82,85,-8,101,55,-26,-6,94,-71,-125,-14,105,38,-7,-6,12,65,56,-28,59,123,35,-11, 
  /* [7][0][][] */ -86,-5,-19,21,-62,-59,18,44,75,115,-62,-76,-108,8,-16,-4,-83,95,0,127,-58,44,26,36,-15,-85,-21,-80,18,36,-12,-6,-14,8,8,-13,14,-61,124,9,6,40,18,-24,56,61,-24,5, 
  /* [8][0][][] */ -14,-104,51,-65,60,-64,79,-38,-23,-119,36,7,-39,7,23,26,-2,10,-53,109,5,47,-24,32,76,-12,-69,-39,-127,-31,-62,-124,14,-70,7,89,-10,34,117,22,17,-2,76,119,-8,-75,-48,79, 
  /* [9][0][][] */ 16,-33,29,-64,42,84,-41,52,23,-42,-40,-20,21,-57,122,-12,10,-123,41,46,-68,46,67,-39,-23,-84,-28,83,55,76,-44,-27,-49,35,-1,127,-24,-48,-54,-23,-31,8,36,108,61,86,-70,19, 
  /* [10][0][][] */ -21,22,-23,-6,22,23,-63,-43,55,39,62,-8,-32,-6,46,-53,-55,127,-3,48,3,-7,21,28,-41,44,-1,91,43,3,-37,-9,73,18,-8,27,-13,-45,-37,21,-80,2,31,-11,16,45,29,29, 
  /* [11][0][][] */ -31,50,-20,36,30,55,4,4,13,21,-127,-70,73,14,-1,-43,-1,22,-41,-49,-3,-12,101,0,43,11,-19,31,-8,23,-11,47,25,-4,-51,-3,37,75,102,16,31,-22,60,3,-45,-19,88,-2, 
  /* [12][0][][] */ -72,6,33,21,-58,-52,0,5,-30,-34,-122,9,70,-93,20,28,52,109,84,-127,-21,46,-36,-77,1,-14,34,-29,12,8,-21,83,68,74,44,-35,-63,-28,36,6,-28,19,62,-9,43,-9,-37,-37, 
  /* [13][0][][] */ -59,-109,-50,-106,12,29,51,14,-127,22,127,-68,55,44,124,3,116,33,2,-100,84,-82,126,3,-80,7,-23,18,-54,-102,-111,17,45,-30,-64,63,33,-54,95,-80,-10,56,65,35,65,-24,113,-74, 
  /* [14][0][][] */ 71,15,-46,2,-39,8,-76,-30,-22,55,47,39,-14,-61,20,-37,45,-119,23,12,83,-50,24,-10,-5,122,-87,0,-63,-32,-94,-3,127,43,77,-17,-72,7,-29,58,-9,-39,97,-17,-58,-48,-58,49, 
  /* [15][0][][] */ -55,13,41,24,93,0,1,31,23,67,-21,56,55,-21,-32,-8,14,32,-1,-37,20,-38,-45,-48,49,-67,-32,61,-35,9,20,9,-59,-6,127,-3,-78,13,49,-17,-47,-23,16,-4,-38,-33,-18,11, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0078075490891933441, 0.0075614787638187408, 0.0066784820519387722, 0.0072009628638625145, 0.0060767759568989277, 0.0065183844417333603, 0.0048242751508951187, 0.0059275934472680092, 0.0034372876398265362, 0.0049780574627220631, 0.0086769862100481987, 0.0077398703433573246, 0.0056177172809839249, 0.0031279348768293858, 0.0061117848381400108, 0.0060452627949416637, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13075, 349, 20374, 908, 14938, 26, 35384, 863, 8687, 40574, 10781, 23347, 5253, 12490, 29094, 25706, 3053, 3070, 7447, 50353, 2596, 17027, 1337, 13409, 14604, 36613, -3963, 1555, -1766, 11166, 24629, 241, -811, -2554, 2888, 14133, 7140, 24100, 5525, 15290, 27057, 2988, 886, 14383, -669, 11150, 33960, 29773, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.7590484579559416e-05, 0.00018932949751615524, 5.0759441364789382e-05, 0.0001273211237275973, 0.00010089093120768666, 6.7762965045403689e-05, 6.2692815845366567e-05, 0.0003037196584045887, 8.3421000454109162e-05, 4.8418172809761018e-05, 4.89030935568735e-05, 0.00011110312334494665, 5.4155290854396299e-05, 9.4754010206088424e-05, 5.8209199778502807e-05, 6.5112450101878494e-05, 7.2010792791843414e-05, 5.8956287830369547e-05, 0.00014652057143393904, 4.2259078327333555e-05, 4.9810420023277402e-05, 6.0533529904205352e-05, 0.00011656764399958774, 7.3988223448395729e-05, 4.5894921640865505e-05, 6.0381938965292647e-05, 8.8807704742066562e-05, 4.0901435568230227e-05, 0.00027161915204487741, 0.00016389692609664053, 8.1269863585475832e-05, 0.00026457870262674987, 0.00015615337179042399, 0.00016301141295116395, 7.4637442594394088e-05, 5.2854957175441086e-05, 8.2495083916001022e-05, 8.9339868281967938e-05, 7.3523959144949913e-05, 6.7672946897801012e-05, 4.8295016313204542e-05, 0.00019804837938863784, 0.00069813342997804284, 7.7000222518108785e-05, 0.00020425519323907793, 3.3408749004593119e-05, 7.1794071118347347e-05, 5.0336697313468903e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -88,60,-127,93,-98,61,-65,69,-81,-67,46,-56,71,-81,-35,-60,64,73,90,-120,91,-114,81,-96,-102,-51,64,127,-99,-54,-111,68,76,-86,79,-104,-73,-125,89,-47,-4,-102,115,-100,92,74,-73,-92, -104,88,-74,108,-81,123,-58,95,-98,-98,84,-84,95,-116,-49,-83,99,106,127,-127,114,-127,90,-127,-106,-80,75,127,21,-80,-118,112,104,-127,112,-111,-90,-127,109,-80,-105,93,127,-116,-34,116,-102,-125, -51,47,-10,30,-12,66,-31,41,-50,-46,33,-38,48,-59,-23,-18,42,48,63,-51,38,-56,45,-46,-72,-43,25,38,90,-33,-71,65,32,-76,51,-35,-20,-49,37,-44,-127,-41,30,-44,-69,80,-46,-89, 
  /* [0][1][][] */ -100,93,-76,114,-85,98,-111,127,-105,-98,73,-88,87,-94,-75,-106,99,100,-64,-96,109,-90,94,-86,-104,-74,100,107,-127,-84,-101,98,92,43,93,-123,-107,-106,111,-85,-97,-116,106,-127,127,70,-103,-123, -127,127,-112,127,-127,127,-127,123,-127,-127,127,-127,127,-127,-127,-127,127,127,-79,-104,127,-96,127,-123,-127,-127,127,118,15,-127,-127,127,127,47,127,-127,-127,-98,127,-127,-114,127,117,-102,-49,127,-127,-127, -83,85,-88,42,-49,45,-72,75,-60,-50,58,-56,79,-72,-49,-23,67,62,-59,-26,49,-39,45,-62,-110,-65,49,57,114,-53,-76,68,46,17,63,-51,-24,-20,51,-55,-71,-75,34,-68,-81,89,-31,-74, 
  /* [0][2][][] */ -47,56,-26,54,-37,50,-58,35,-56,-46,31,-43,33,-49,-25,-65,68,44,-91,-17,29,-28,26,-31,-54,-35,47,11,-76,-53,-51,22,45,69,52,-77,-31,-48,31,-43,-105,-52,48,-71,76,36,-59,-48, -70,65,-87,63,-66,50,-62,66,-65,-61,55,-67,50,-66,-51,-54,83,58,-123,-14,37,-22,29,-39,-74,-64,57,29,10,-79,-77,22,49,90,61,-79,-46,-43,31,-59,-62,69,53,-96,-22,54,-58,-70, -28,49,-72,14,-28,12,-31,31,-17,-32,27,-29,29,-29,-22,2,51,18,-76,12,19,-3,9,-5,-40,-26,32,15,72,-21,-41,4,29,52,32,-17,2,8,15,-21,-16,-29,18,-41,-43,56,2,-50, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0032975955400615931, 0.0080465031787753105, 0.0021572762634605169, 0.0054111476056277752, 0.0042878645472228527, 0.0028799260035157204, 0.0026644447352737188, 0.012908085249364376, 0.0035453923046588898, 0.0020577723626047373, 0.0020783813670277596, 0.0047218827530741692, 0.0023015998303890228, 0.0040270453318953514, 0.0024738910142332315, 0.0027672790456563234, 0.0030604586936533451, 0.0025056421291083097, 0.0062271240167319775, 0.0017960107652470469, 0.0021169427782297134, 0.0025726750027388334, 0.0049541248008608818, 0.0031444993801414967, 0.0019505340605974197, 0.0025662323459982872, 0.0037743274588137865, 0.0017383110243827105, 0.011543813161551952, 0.0069656195119023323, 0.003453969256952405, 0.011244594119489193, 0.0066365180537104607, 0.0069279847666621208, 0.0031720912083983421, 0.0022463356144726276, 0.003506041131913662, 0.0037969443947076797, 0.0031247681472450495, 0.0028761001303792, 0.0020525380969047546, 0.0084170559421181679, 0.029670670628547668, 0.0032725094351917505, 0.0086808456107974052, 0.0014198718126863241, 0.003051247913390398, 0.0021393096540123224, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1294, -941, 666, -1283, 2802, -543, 2789, -2738, 858, 305, 1949, 2736, 158, -288, 658, 4146, -1245, 2310, 4827, 648, -491, 2130, -483, 3049, 2287, 999, 931, -691, 5284, -232, 2490, -1391, -546, 3587, -883, 1416, 1369, 1122, 175, 3144, 1330, 7607, -4706, 1084, 6512, 89, 2141, 2034, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00032658339478075504, 0.00039371548336930573, 0.00035125770955346525, 0.0003320461546536535, 0.0002768492850009352, 0.00030702145886607468, 0.00026945502031594515, 0.00019852202967740595, 0.00036392017500475049, 0.00047195507795549929, 0.00020296465663705021, 0.00026603089645504951, 0.00047495620674453676, 0.00034624221734702587, 0.00034009880619123578, 0.00018724732217378914, 0.00036327849375084043, 0.00032487083808518946, 0.00019506733224261552, 0.00036547300987876952, 0.00040859080036170781, 0.00026910853921435773, 0.00028354668756946921, 0.00025356857804581523, 0.00020528637105599046, 0.0003606941900216043, 0.00033124428591690958, 0.00038384180516004562, 0.0001721711887512356, 0.00030767839052714407, 0.00017960522382054478, 0.00023355126904789358, 0.00021970488887745887, 0.00021923513850197196, 0.000305972556816414, 0.00034315549419261515, 0.00032984628342092037, 0.00023260164016392082, 0.00031432879040949047, 0.00023353032884187996, 0.00039600810850970447, 0.0001175017750938423, 0.00012725011038128287, 0.00034986034734174609, 0.0001336615823674947, 0.00028815417317673564, 0.00028007460059598088, 0.00029445555992424488, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 66,26,127,-34,67,92,-64,-54, 
  /* [1][0][][] */ 14,-74,-127,5,42,19,23,-2, 
  /* [2][0][][] */ -127,-1,-51,-17,56,26,-75,-34, 
  /* [3][0][][] */ 46,70,127,-89,-19,-121,-5,-22, 
  /* [4][0][][] */ -127,18,-45,-25,45,13,-38,-60, 
  /* [5][0][][] */ -94,25,-55,-17,9,42,-80,-127, 
  /* [6][0][][] */ -32,-127,-115,40,86,14,6,38, 
  /* [7][0][][] */ -59,-127,-95,-79,-70,-62,21,84, 
  /* [8][0][][] */ 84,30,-3,-2,93,-78,-127,9, 
  /* [9][0][][] */ -42,58,-53,92,-59,-40,127,-27, 
  /* [10][0][][] */ -30,127,36,70,114,-26,-3,58, 
  /* [11][0][][] */ -78,-31,-28,-15,-86,111,127,-1, 
  /* [12][0][][] */ 68,30,-127,36,-10,-31,-66,-18, 
  /* [13][0][][] */ 68,-40,-68,12,10,-127,-28,-36, 
  /* [14][0][][] */ 12,-80,64,9,125,-127,-58,19, 
  /* [15][0][][] */ -37,-49,0,127,63,84,-76,21, 
  /* [16][0][][] */ 107,33,-38,20,67,-97,-127,-16, 
  /* [17][0][][] */ 56,127,55,77,45,64,23,-84, 
  /* [18][0][][] */ 39,-18,-7,-8,127,3,30,-19, 
  /* [19][0][][] */ 12,126,32,8,-127,25,26,-32, 
  /* [20][0][][] */ -41,27,56,-127,13,25,-14,115, 
  /* [21][0][][] */ -35,74,39,-127,22,42,-11,112, 
  /* [22][0][][] */ -67,-61,-107,14,-127,125,110,-13, 
  /* [23][0][][] */ 96,44,-127,23,12,-55,-76,-17, 
  /* [24][0][][] */ -53,45,3,8,-23,81,-127,98, 
  /* [25][0][][] */ -96,-59,-127,19,-50,-73,66,93, 
  /* [26][0][][] */ 47,-9,-38,-35,110,-15,127,-42, 
  /* [27][0][][] */ 127,-68,26,88,-2,32,-20,92, 
  /* [28][0][][] */ 43,57,67,-3,127,-56,52,-36, 
  /* [29][0][][] */ -9,-15,-30,-43,-73,15,127,-43, 
  /* [30][0][][] */ 42,-127,-58,-62,-108,3,17,-57, 
  /* [31][0][][] */ 11,34,-8,-12,-127,15,-34,-7, 
  /* [32][0][][] */ 39,-60,-50,72,-14,-79,112,-127, 
  /* [33][0][][] */ 48,127,43,34,47,-21,-30,-12, 
  /* [34][0][][] */ -124,-44,127,-5,-35,107,113,13, 
  /* [35][0][][] */ -33,78,127,-13,-57,-69,-38,33, 
  /* [36][0][][] */ -94,4,96,-20,-17,127,73,21, 
  /* [37][0][][] */ -16,-92,-9,-127,-50,-81,83,41, 
  /* [38][0][][] */ 52,-19,89,-61,65,64,-127,9, 
  /* [39][0][][] */ -20,87,-127,-39,-11,7,9,88, 
  /* [40][0][][] */ 60,-51,17,37,15,0,5,127, 
  /* [41][0][][] */ -23,91,127,-3,10,77,-68,28, 
  /* [42][0][][] */ 68,-127,-113,-23,-117,2,18,-96, 
  /* [43][0][][] */ -9,-89,27,-74,127,-41,18,43, 
  /* [44][0][][] */ 5,127,117,11,3,51,-64,11, 
  /* [45][0][][] */ -38,34,20,86,-113,67,-127,13, 
  /* [46][0][][] */ -45,-45,58,45,-127,-123,-20,-10, 
  /* [47][0][][] */ -21,64,47,-114,-127,46,-23,69, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0030726329423487186, 0.0037042396143078804, 0.0033047790639102459, 0.0031240289099514484, 0.0026047136634588242, 0.002888586139306426, 0.0025351452641189098, 0.0018677781336009502, 0.0034239129163324833, 0.0044403504580259323, 0.0019095762399956584, 0.0025029298849403858, 0.0044685862958431244, 0.0032575912773609161, 0.0031997915357351303, 0.0017617009580135345, 0.0034178756177425385, 0.0030565203633159399, 0.00183527497574687, 0.0034385225735604763, 0.0038441927172243595, 0.002531885402277112, 0.0026677255518734455, 0.0023856791667640209, 0.0019314198289066553, 0.0033935615792870522, 0.0031164844986051321, 0.0036113439127802849, 0.0016198584344238043, 0.0028947668615728617, 0.0016898009926080704, 0.0021973478142172098, 0.0020670753438025713, 0.0020626557525247335, 0.0028787176124751568, 0.0032285500783473253, 0.0031033316627144814, 0.0021884134039282799, 0.0029573366045951843, 0.0021971508394926786, 0.0037258095107972622, 0.0011055057402700186, 0.0011972221545875072, 0.0032916322816163301, 0.0012575440341606736, 0.0027110748924314976, 0.0026350587140768766, 0.0027703607920557261, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1316, -411, 23382, -6170, 5875, -13826, -419, -13224, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.248578135157004e-05, 9.5660449005663395e-05, 0.00011701630137395114, 0.00012911464727949351, 0.00014848704449832439, 0.00013760309957433492, 7.9025863669812679e-05, 7.3390743636991829e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -37,-50,-16,-63,1,-12,93,92,-102,-83,-29,6,-51,-2,-55,33,-86,14,13,127,63,-44,12,94,67,75,21,-1,-93,-55,-81,-52,-56,103,34,-46,32,-26,85,2,23,7,9,-102,41,-33,-40,-82, 
  /* [1][0][][] */ -10,55,-16,-25,-64,56,-16,-42,-27,72,-9,18,56,34,-50,4,-23,-108,78,-52,127,16,-58,17,56,-7,-77,61,38,-8,64,25,-29,-11,0,-9,4,108,-19,-19,68,34,0,14,105,19,-25,59, 
  /* [2][0][][] */ -30,-37,110,3,89,-46,-13,18,-38,-3,-5,46,3,-46,-46,-127,-55,-103,-26,15,-99,31,-41,-32,-46,16,2,-46,-41,7,-33,-16,0,-7,24,-1,26,-35,-52,6,44,-37,28,-46,-49,-46,-63,-47, 
  /* [3][0][][] */ 55,20,65,8,28,-43,34,77,-42,-20,47,-23,-61,52,-21,61,59,39,-39,25,-108,-57,127,-7,-1,-3,-57,-36,-51,73,113,-67,2,-106,-26,44,-11,-66,-13,79,-75,-61,65,0,-91,-61,65,-11, 
  /* [4][0][][] */ 23,-18,77,-33,2,-9,-4,1,-58,-7,-24,11,50,-74,44,-102,39,46,-11,-36,11,30,21,15,0,-6,64,-17,24,19,-127,-12,-26,-21,8,18,51,-2,34,5,-44,-12,-72,31,-22,-100,0,22, 
  /* [5][0][][] */ 25,-48,60,28,36,18,34,5,-75,-5,-40,30,32,5,10,-41,90,75,-5,-16,88,-49,127,-90,-14,46,10,50,16,15,-28,-51,-25,-43,-39,11,43,28,67,7,-75,30,27,25,51,-14,79,-6, 
  /* [6][0][][] */ -41,54,-126,95,55,23,48,28,-19,-3,63,-74,-94,-15,-30,35,-124,30,-10,100,22,50,-88,-99,-10,-22,30,78,-32,-41,-42,15,43,76,-51,-25,-13,-1,83,4,68,70,-126,-54,-37,127,-59,-42, 
  /* [7][0][][] */ 32,80,-87,6,13,59,114,69,49,68,-107,-10,-43,-3,-66,-43,30,36,127,101,79,3,122,33,109,100,-51,87,-79,32,0,-84,26,-72,-16,28,-4,89,-59,84,-62,45,-15,-85,77,-20,64,-23, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0039306455291807652, 0.0040655690245330334, 0.0049731926992535591, 0.0054873726330697536, 0.0063106995075941086, 0.0058481316082179546, 0.0033585990313440561, 0.003119106637313962, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 574, 12578, -842, -654, -79, -718, 1272, -1011, -3570, 254, -4906, -50, -340, -414, -3168, 4549, 5368, 3998, 239, -4744, -7160, 502, 19237, -5020, 150, -189, 7005, -6341, 862, -575, -7570, 9395, 6308, 659, 4591, 363, -11, -605, 10804, -1339, 4659, -3244, 3589, 4772, -1847, 9219, 342, 2988, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030746491393074393, 0.00018175118020735681, 0.00073773344047367573, 0.00026793245342560112, 0.00036369654117152095, 0.00042855157516896725, 0.00025478634051978588, 0.00031711318297311664, 8.9307613961864263e-05, 0.00033258993062190711, 0.00022363231983035803, 0.0043484484776854515, 0.00046412655501626432, 0.0013302386505529284, 0.00049358466640114784, 0.00067007675534114242, 0.00021435639064293355, 6.770129402866587e-05, 0.00035313845728524029, 0.0003662934759631753, 0.00023959402460604906, 0.00027736363699659705, 7.8950513852760196e-05, 0.0004410606634337455, 0.00020637876878026873, 0.00057799083879217505, 0.00047410521074198186, 0.00023627697373740375, 0.0002632182149682194, 0.00053671322530135512, 0.00017227798525709659, 0.00010427388042444363, 0.00014241112512536347, 0.00025747474865056574, 0.00012337401858530939, 0.00048619325389154255, 0.0047119352966547012, 0.00033162318868562579, 0.000126344442833215, 0.00020021523232571781, 0.00020967965247109532, 0.00015219973283819854, 0.00033458933467045426, 0.00019540627545211464, 0.00042521907016634941, 8.5279054474085569e-05, 6.060908708604984e-05, 0.00020386507094372064, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-41,10,9,-16,-94,-42,52,-33,-8,-5,11,47,-8,-8,3,88,-3,33,10,7,-21,-71,27,-7,-14,-6,-25,-68,74,-8,-126,44,-11,-59,-63,-8,-28,3,-14,-4,40,5,10,-7,74,127,-28, -127,-99,-23,127,-62,64,-95,127,32,16,16,1,57,20,2,-43,-28,43,22,7,2,127,6,127,127,-31,-44,35,61,-122,-2,-90,61,-9,-43,-127,28,18,-64,-43,-119,-3,-96,-127,39,62,58,102, -18,-12,12,9,-24,31,44,51,9,-44,-3,6,-15,-4,4,5,-58,23,-67,-29,-11,-33,127,23,-54,3,5,-7,8,41,13,1,-14,-20,-29,70,9,5,8,92,33,-20,21,-42,-5,37,-15,-24, 
  /* [0][1][][] */ -11,-18,-26,0,33,-110,127,-84,-12,4,18,39,127,15,6,-35,-24,-43,35,48,76,-70,38,15,-71,127,-81,-12,127,-93,45,-127,-45,0,-87,9,11,-59,-44,8,126,127,8,-124,-58,-57,0,70, 90,-127,127,1,127,64,-67,-62,40,127,127,-127,-98,127,127,127,127,127,106,127,127,111,3,3,115,-102,-127,127,35,127,127,-1,-127,127,127,122,-127,127,-127,-117,39,40,-127,-30,127,-127,-14,70, 19,23,-38,-3,-47,127,-115,98,110,-84,1,65,-32,10,16,-65,20,6,-127,15,20,-126,-36,-4,68,-15,-30,121,-84,-36,24,-34,-36,11,102,-27,41,-3,-11,-77,110,5,25,47,-53,91,86,-84, 
  /* [0][2][][] */ -9,14,7,-30,1,-66,-17,1,0,-6,-2,3,-20,-13,4,-3,-54,7,23,-35,10,-16,86,-8,-124,2,32,-19,10,3,3,44,-16,-17,-78,26,3,-11,26,46,-31,4,11,10,-14,16,-10,0, 33,-30,-35,-36,27,41,123,-104,127,-37,-10,8,-78,-19,-19,-72,-13,105,3,28,15,34,-23,-35,-91,56,67,-5,-100,15,-30,-7,-30,-6,-43,1,58,-23,6,127,-127,2,-6,67,37,48,15,-127, -11,15,4,-19,-16,14,-1,-50,-30,-20,-20,5,21,-11,-11,13,54,33,-35,-12,-10,-19,-56,-12,15,-27,15,-13,-22,6,-11,15,20,-19,-27,-53,-2,4,27,30,-16,-9,9,18,-13,10,61,-60, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013067258521914482, 0.0077244248241186142, 0.031353671103715897, 0.011387129314243793, 0.015457103028893471, 0.018213441595435143, 0.010828419588506222, 0.013477309606969357, 0.0037955734878778458, 0.014135072007775307, 0.0095043731853365898, 0.18480905890464783, 0.019725378602743149, 0.056535139679908752, 0.02097734808921814, 0.028478261083364487, 0.009110146202147007, 0.0028773047961294651, 0.015008384361863136, 0.015567472204566002, 0.010182745754718781, 0.011787954717874527, 0.0033553966786712408, 0.018745077773928642, 0.0087710972875356674, 0.024564608931541443, 0.020149471238255501, 0.010041771456599236, 0.011186773888766766, 0.022810311987996101, 0.0073218140751123428, 0.0044316397979855537, 0.0060524726286530495, 0.010942676104605198, 0.0052433954551815987, 0.020663212984800339, 0.20025724172592163, 0.014093984849750996, 0.0053696385584771633, 0.0085091469809412956, 0.0089113852009177208, 0.0064684883691370487, 0.014220045879483223, 0.0083047663792967796, 0.018071809783577919, 0.0036243598442524672, 0.0025758862029761076, 0.0086642652750015259, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 1440, 3829, 11437, 1160, 1757, -1029, 3612, 9610, 2458, -560, 2459, -2190, 14775, -1328, 1491, 15413, -283, 1945, 161, 2469, 2003, 2760, 383, 24972, 5395, 3519, 10312, 1113, 5001, 4282, 483, 835, 831, 1679, -135, 250, -1995, -449, 1943, 1798, 3152, 1288, 2991, 3024, 3878, 2712, 1410, 4832, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0004047775873914361, 0.00021924798784311861, 8.322677604155615e-05, 0.00023830914869904518, 0.0002771989384200424, 0.0003772701311390847, 0.00021208939142525196, 9.7876516520045698e-05, 0.00024647999089211226, 0.00036177248694002628, 0.00032333258423022926, 0.00023254500410985202, 6.7764631239697337e-05, 0.00032337979064323008, 0.0003077658184338361, 6.8721477873623371e-05, 0.00040160713251680136, 0.00023145014711190015, 0.00040871583041734993, 0.00025657398509792984, 0.00033699287450872362, 0.00026957853697240353, 0.00051617965800687671, 4.4599255488719791e-05, 0.00016929807316046208, 0.00017047350411303341, 9.7238058515358716e-05, 0.0003571297274902463, 0.00015853843069635332, 0.00017556409875396639, 0.00062257470563054085, 0.00052536133443936706, 0.00026753544807434082, 0.00023387630062643439, 0.00037987428368069232, 0.0003830418863799423, 0.00026873347815126181, 0.0004338989092502743, 0.00030124705517664552, 0.00030183704802766442, 0.0002345391403650865, 0.00037347787292674184, 0.00027237643371336162, 0.00025429375818930566, 0.00018377276137471199, 0.00026954009081237018, 0.00049785641022026539, 0.00017985861632041633, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-66,-67,8,73,3,54, 
  /* [1][0][][] */ 54,-78,37,-127,-58,67,-75,-47, 
  /* [2][0][][] */ -36,127,122,42,122,8,61,14, 
  /* [3][0][][] */ 112,43,-89,63,6,-110,-127,-29, 
  /* [4][0][][] */ -39,29,6,-83,-44,105,127,52, 
  /* [5][0][][] */ 18,89,-127,-69,52,83,21,-15, 
  /* [6][0][][] */ -7,127,65,52,57,18,13,-67, 
  /* [7][0][][] */ 127,-11,-32,23,28,14,110,17, 
  /* [8][0][][] */ 56,127,54,91,112,87,102,-88, 
  /* [9][0][][] */ 45,120,-127,-93,25,101,3,83, 
  /* [10][0][][] */ -75,-41,27,-48,-1,-28,-58,127, 
  /* [11][0][][] */ 15,-115,-127,-16,26,-15,43,-6, 
  /* [12][0][][] */ -26,-96,-107,-30,-127,30,-67,35, 
  /* [13][0][][] */ -8,4,-101,95,-127,-23,3,-21, 
  /* [14][0][][] */ -60,-40,-127,-10,32,-3,-13,-60, 
  /* [15][0][][] */ 20,-100,-127,10,-99,-30,-22,-10, 
  /* [16][0][][] */ 127,-69,-21,63,-78,24,34,104, 
  /* [17][0][][] */ -20,123,127,-23,-50,-16,-34,-32, 
  /* [18][0][][] */ 9,-127,49,79,3,-76,47,-73, 
  /* [19][0][][] */ 127,-41,-58,37,-107,11,39,100, 
  /* [20][0][][] */ -26,-127,85,75,-12,-91,-1,-69, 
  /* [21][0][][] */ -6,-51,-11,-34,127,-5,49,19, 
  /* [22][0][][] */ -127,24,-80,48,54,58,-93,-110, 
  /* [23][0][][] */ -115,-41,71,6,-126,124,127,-49, 
  /* [24][0][][] */ -29,75,14,-28,-30,127,116,7, 
  /* [25][0][][] */ -61,-116,-127,-55,-65,-16,-29,-58, 
  /* [26][0][][] */ -9,60,-16,127,-84,31,-61,-1, 
  /* [27][0][][] */ 19,-127,34,83,17,-60,5,-125, 
  /* [28][0][][] */ 11,120,79,46,127,-21,35,-71, 
  /* [29][0][][] */ 109,32,-40,-20,79,-127,-115,27, 
  /* [30][0][][] */ 23,-8,32,-127,14,-21,14,-23, 
  /* [31][0][][] */ 41,-39,6,64,-10,32,13,127, 
  /* [32][0][][] */ -100,-68,22,-60,-61,127,62,101, 
  /* [33][0][][] */ -35,55,47,-37,38,127,-116,76, 
  /* [34][0][][] */ 38,127,-69,-47,24,42,-72,62, 
  /* [35][0][][] */ 10,-127,43,67,-23,-61,41,-84, 
  /* [36][0][][] */ -14,-34,-81,-12,-127,-59,-14,10, 
  /* [37][0][][] */ -54,-127,83,94,-39,-97,-18,-43, 
  /* [38][0][][] */ -83,30,80,-68,-127,-90,-66,97, 
  /* [39][0][][] */ 80,-127,112,74,-6,-89,-22,-104, 
  /* [40][0][][] */ 4,53,16,52,-127,-15,-64,23, 
  /* [41][0][][] */ 108,127,-78,-106,54,15,-8,18, 
  /* [42][0][][] */ -6,-41,-20,11,127,8,49,20, 
  /* [43][0][][] */ 127,26,84,20,-81,-20,68,114, 
  /* [44][0][][] */ 68,46,-29,6,83,-113,-127,37, 
  /* [45][0][][] */ 48,18,18,20,72,-127,-9,-53, 
  /* [46][0][][] */ 60,-34,-7,127,43,57,15,69, 
  /* [47][0][][] */ -87,-74,54,69,-34,6,127,-74, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0044448636472225189, 0.0024075626861304045, 0.00091391341993585229, 0.0026168732438236475, 0.0030439221300184727, 0.0041428040713071823, 0.0023289541713893414, 0.0010747822234407067, 0.00270659732632339, 0.0039726244285702705, 0.0035505159758031368, 0.0025535773020237684, 0.00074412353569641709, 0.0035510342568159103, 0.0033795770723372698, 0.00075463071698322892, 0.0044100489467382431, 0.0025415546260774136, 0.0044881096109747887, 0.0028174396138638258, 0.0037005194462835789, 0.0029602425638586283, 0.0056681698188185692, 0.00048974453238770366, 0.0018590625841170549, 0.0018719700165092945, 0.0010677713435143232, 0.0039216424338519573, 0.0017409108113497496, 0.0019278698600828648, 0.0068364944308996201, 0.0057689943350851536, 0.0029378074686974287, 0.0025681962724775076, 0.0041714003309607506, 0.0042061838321387768, 0.0029509628657251596, 0.0047646448947489262, 0.0033079946879297495, 0.0033144734334200621, 0.0025754747912287712, 0.0041011613793671131, 0.0029909661971032619, 0.0027924003079533577, 0.0020180090796202421, 0.0029598204419016838, 0.0054669622331857681, 0.0019750278443098068, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7916, 14265, -5174, 5783, -925, 3634, -11510, -16591, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025587590062059462, 0.00012034878454869613, 0.00015977575094439089, 0.00014637396088801324, 0.00019192097533959895, 0.00015572160191368312, 0.0002161584998248145, 0.00014024761912878603, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-3,34,9,-32,-12,11,9,-41,-5,-62,-57,-27,-61,-11,-31,44,-38,37,42,-15,29,-38,14,3,-39,52,-12,-5,-19,14,7,81,34,36,-127,17,-3,-20,-31,2,-14,41,46,35,3,24,1, 
  /* [1][0][][] */ -4,35,58,-23,-7,46,-49,-32,6,25,-14,-86,15,93,-14,57,-18,19,-22,-58,7,-72,-26,17,-66,-9,-2,-114,-19,-12,31,-57,42,80,-35,6,127,-26,5,44,-30,42,-76,-30,118,-15,-29,-25, 
  /* [2][0][][] */ -3,-23,-61,19,-2,43,24,6,-6,40,-3,29,65,-91,18,-58,32,-88,24,32,-24,52,-10,26,-17,62,-25,-68,22,1,18,-68,-42,-84,34,-27,102,21,-8,-61,-6,29,80,30,127,19,20,24, 
  /* [3][0][][] */ -5,23,-69,44,16,-37,-67,-103,17,-19,-37,-1,6,25,36,79,-5,11,-33,25,2,-93,24,-57,-72,-5,127,-16,-40,4,-64,16,-4,-74,12,-9,-19,-35,-21,96,-41,-35,1,20,41,6,-35,42, 
  /* [4][0][][] */ -26,-49,-6,8,30,-28,-11,-7,29,-30,56,-78,5,29,8,12,-15,-23,12,-17,-1,-49,2,-19,16,-10,40,50,32,17,-14,27,-9,0,2,-1,-66,84,33,-24,31,-21,-22,-22,-77,13,127,8, 
  /* [5][0][][] */ 49,-24,0,17,27,-39,39,-127,25,-30,-8,114,-81,68,20,-65,-1,-90,11,2,-35,65,-31,-50,-60,75,-25,1,-20,48,-41,-34,30,55,37,-3,-38,-8,-44,-43,16,-36,-47,-5,-34,56,90,22, 
  /* [6][0][][] */ 50,-20,23,-11,-36,-21,-34,20,-42,5,-42,127,-44,-37,-8,55,9,49,15,33,40,-85,-18,22,21,38,-65,8,7,-44,15,38,8,19,-17,-1,14,-2,-3,-3,-9,-15,40,57,-4,-37,72,-16, 
  /* [7][0][][] */ -29,3,-10,68,31,33,5,26,19,2,66,-4,118,106,57,53,42,42,-15,1,20,-18,-90,-30,15,0,-29,61,29,-32,-34,-13,36,4,42,-94,-73,42,43,50,-35,39,80,127,-62,-27,-104,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010874724946916103, 0.0051148231141269207, 0.0067904694005846977, 0.0062208934687077999, 0.008156641386449337, 0.0066181677393615246, 0.0091867363080382347, 0.0059605236165225506, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11687, 3470, 2467, -50, 871, -661, -62, 34076, -704, 1145, 8695, 65256, 3385, 8722, 362, 10434, -1011, 13169, 2553, 6229, 11309, 1247, 2738, -9258, 10095, 1279, 6491, 12382, 517, -472, -10047, 8709, 3000, -96, -210, 7278, -9134, 17805, 224, 16974, -1302, -768, 8019, 2604, 1103, -572, 2853, -852, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.4845276433043182e-05, 9.9131168099120259e-05, 0.00018209697736892849, 0.00019280779815744609, 0.00079772318713366985, 0.0001868997496785596, 0.00030099606374278665, 9.2300258984323591e-05, 0.00015526330389548093, 0.00011234134581172839, 6.3659463194198906e-05, 4.534256731858477e-05, 7.8133874922059476e-05, 5.9087062254548073e-05, 0.00035666895564645529, 0.00026569704641588032, 0.00011728746176231652, 0.00034576174221001565, 0.00011106166493846104, 0.00013913940347265452, 0.00011392998567316681, 0.00047720081056468189, 0.00011848287977045402, 0.00025152522721327841, 0.00011035504576284438, 0.0001064458629116416, 4.7741650632815436e-05, 7.6373726187739521e-05, 0.0001666467433096841, 0.0010584770934656262, 0.00028353906236588955, 8.4143670392222703e-05, 9.6464304078835994e-05, 0.00014566340541932732, 0.00020079722162336111, 6.0674090491374955e-05, 6.2882754718884826e-05, 3.686782656586729e-05, 0.00012500450247898698, 7.0401394623331726e-05, 0.00012824115401599556, 0.00019159652583766729, 6.5318985434714705e-05, 8.1980477261822671e-05, 7.5825606472790241e-05, 0.00058304698904976249, 6.7095024860464036e-05, 0.00024621770717203617, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-91,-10,-24,127,-60,62,-62,-83,-78,-26,-60,120,32,60,-127,62,-21,-1,-41,-73,115,-2,13,-26,70,61,-45,71,-72,22,-48,-104,-88,44,77,33,71,111,-66,-124,-16,37,74,44,-127,87,91, -66,-118,-78,50,-81,109,50,-62,-73,42,72,-122,127,95,89,-92,-83,-79,28,-59,-77,117,-72,123,-85,99,83,-127,89,-54,7,-125,-44,-87,78,127,115,102,127,-60,-127,-63,60,95,82,114,91,85, -11,-34,-72,98,-50,-28,25,-16,93,25,53,-80,23,60,-42,-16,-84,-15,25,-41,-24,-6,-90,-10,-78,45,28,-88,28,53,127,-75,17,11,-8,46,76,59,48,4,-24,98,55,40,50,32,14,-127, 
  /* [0][1][][] */ -109,-102,-6,-82,-82,-75,91,-111,-127,-127,89,-85,96,41,-118,-68,127,-127,-64,-85,-84,127,-44,9,-19,82,102,-46,-108,-79,7,-46,-97,-127,-127,66,49,87,7,-98,61,-19,79,111,77,111,120,-127, -127,-127,-127,-111,-31,127,127,-127,88,62,127,-127,110,127,52,-116,52,-94,-127,-127,-127,122,-127,127,-127,127,127,-124,-127,127,-19,-127,-127,-108,49,121,127,127,-14,-127,97,-98,127,127,127,-2,127,126, -69,-67,-124,127,68,-49,46,-36,67,28,14,-60,16,72,58,-47,-23,1,-22,-72,-60,-11,-79,-24,-125,48,34,-86,-53,36,124,-87,-58,6,61,74,82,70,-32,-35,45,127,76,16,58,-51,25,30, 
  /* [0][2][][] */ -94,-36,17,21,-40,-28,21,-52,34,-43,18,-31,8,14,-45,-8,-83,-23,86,-52,-12,32,-67,-8,-8,47,73,-16,37,59,2,6,16,-85,-44,37,17,11,-73,-49,17,-7,38,40,27,53,13,-63, -66,-52,-40,-71,91,41,51,-64,95,27,-36,-59,-4,42,-127,-77,37,7,42,-78,-42,26,-66,57,-66,57,75,-38,42,4,-27,-33,-63,-14,-67,56,35,18,-119,-65,23,-46,71,74,43,-112,23,10, -12,-28,-55,-17,-26,-13,18,-33,-63,13,-14,-17,-11,18,29,-26,27,40,-6,-60,-35,-22,-23,-25,-62,6,19,-23,11,-65,54,-18,-77,16,15,51,24,16,-69,-32,-3,46,18,27,22,-6,7,50, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036059243138879538, 0.0042130746878683567, 0.0077391210943460464, 0.0081943310797214508, 0.033903233706951141, 0.0079432390630245209, 0.012792332097887993, 0.0039227609522640705, 0.0065986905246973038, 0.0047745071351528168, 0.0027055272366851568, 0.001927059143781662, 0.0033206895459443331, 0.0025112000294029713, 0.015158430673182011, 0.011292124167084694, 0.004984716884791851, 0.014694874174892902, 0.0047201206907629967, 0.0059134247712790966, 0.0048420242965221405, 0.020281033590435982, 0.0050355223938822746, 0.010689822025597095, 0.004690089263021946, 0.0045239492319524288, 0.0020290201064199209, 0.0032458831556141376, 0.0070824865251779556, 0.044985275715589523, 0.01205040980130434, 0.0035761059261858463, 0.004099732730537653, 0.0061906944029033184, 0.0085338819772005081, 0.0025786487385630608, 0.0026725169736891985, 0.0015668825944885612, 0.0053126909770071507, 0.0029920591041445732, 0.0054502491839230061, 0.0081428522244095802, 0.0027760567609220743, 0.0034841701854020357, 0.0032225882168859243, 0.024779496714472771, 0.002851538360118866, 0.010464251972734928, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 810, -302, -324, 788, 9407, 1152, -381, 2842, 1027, 802, 174, 2302, 672, 246, -526, 351, 2513, 9171, 2708, -613, 718, -1125, -56, 1502, -181, -436, 1173, 1, 2386, 15046, 1559, -23, 290, -94, 2316, -34, 231, -137, 762, 899, 1444, 1422, 113, -180, 466, 1860, 1157, -153, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00063432764727622271, 0.00060504174325615168, 0.00043005440966226161, 0.00049322465201839805, 0.00010523814853513613, 0.00052826746832579374, 0.00065849907696247101, 0.00030767251155339181, 0.00044975560740567744, 0.00081448088167235255, 0.00048622494796290994, 0.00038822297938168049, 0.00036940118297934532, 0.00063187815248966217, 0.00049396895337849855, 0.00040911984979175031, 0.00029653840465471148, 0.00010333352838642895, 0.00028587435372173786, 0.00048587477067485452, 0.00060581596335396171, 0.00023583740403410047, 0.00074857624713331461, 0.00049124727956950665, 0.00072591297794133425, 0.0011875239433720708, 0.00044507882557809353, 0.0017280791653320193, 0.00034284166758880019, 6.6592932853382081e-05, 0.00048531132051721215, 0.0010596291394904256, 0.00060777610633522272, 0.00061110389651730657, 0.00030998446163721383, 0.00050592212937772274, 0.00075214460957795382, 0.0009797967504709959, 0.00060974550433456898, 0.00065292062936350703, 0.00039051991188898683, 0.00046804844168946147, 0.00056592508917674422, 0.0007571910391561687, 0.00065198895754292607, 0.00026489552692510188, 0.00032660228316672146, 0.00050544843543320894, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -39,26,2,-15,-81,-35,-127,31, 
  /* [1][0][][] */ 81,-76,-51,-60,127,-93,86,22, 
  /* [2][0][][] */ -102,124,-52,-127,53,-19,-28,46, 
  /* [3][0][][] */ 51,16,86,12,86,122,127,-15, 
  /* [4][0][][] */ -77,-127,63,5,-51,-114,2,-38, 
  /* [5][0][][] */ 127,-18,69,70,-65,-13,-3,-23, 
  /* [6][0][][] */ 27,33,127,-27,43,-37,-41,26, 
  /* [7][0][][] */ 28,7,-127,-32,-41,103,99,-69, 
  /* [8][0][][] */ 2,127,-37,17,66,112,58,56, 
  /* [9][0][][] */ 4,125,-63,102,14,-123,41,127, 
  /* [10][0][][] */ 0,-127,-5,-37,-80,-126,-59,-79, 
  /* [11][0][][] */ -127,-80,104,52,-9,-69,100,60, 
  /* [12][0][][] */ -26,41,-127,76,32,-49,-70,96, 
  /* [13][0][][] */ 87,-127,85,81,6,37,39,-51, 
  /* [14][0][][] */ -28,87,-36,-127,-27,-100,-26,-59, 
  /* [15][0][][] */ 44,112,33,-16,38,-58,93,-127, 
  /* [16][0][][] */ -98,-127,-51,81,-50,24,-9,68, 
  /* [17][0][][] */ -18,-108,-127,86,-55,81,-53,76, 
  /* [18][0][][] */ -104,-67,-43,93,-11,74,-10,127, 
  /* [19][0][][] */ 64,-127,98,-125,12,-67,26,-29, 
  /* [20][0][][] */ -1,70,35,8,41,127,74,-15, 
  /* [21][0][][] */ 28,115,48,-35,41,-65,95,-127, 
  /* [22][0][][] */ 23,13,101,19,-8,127,29,-36, 
  /* [23][0][][] */ -95,-62,34,-76,88,90,-65,-127, 
  /* [24][0][][] */ -91,-92,29,-79,101,103,-39,-127, 
  /* [25][0][][] */ 127,12,-56,-14,17,32,-61,-8, 
  /* [26][0][][] */ -127,-33,-124,-17,-50,-29,23,-1, 
  /* [27][0][][] */ 77,34,-4,-63,-127,-29,88,91, 
  /* [28][0][][] */ -127,-74,8,44,-71,-94,-3,2, 
  /* [29][0][][] */ 127,95,41,-117,27,14,-55,-97, 
  /* [30][0][][] */ -80,-60,41,-69,71,72,-54,-127, 
  /* [31][0][][] */ 49,45,-7,127,3,-70,8,10, 
  /* [32][0][][] */ -29,127,-8,35,22,68,-19,48, 
  /* [33][0][][] */ -36,127,-81,29,21,-27,-31,4, 
  /* [34][0][][] */ -126,-127,-47,103,-17,13,19,101, 
  /* [35][0][][] */ -52,127,-34,1,71,109,58,73, 
  /* [36][0][][] */ 85,29,-4,-40,-127,-32,98,115, 
  /* [37][0][][] */ -66,104,29,22,-127,108,-27,-90, 
  /* [38][0][][] */ 37,34,30,25,127,70,103,60, 
  /* [39][0][][] */ -22,-73,39,-20,11,41,-102,127, 
  /* [40][0][][] */ -72,-51,-64,127,-30,7,13,66, 
  /* [41][0][][] */ 127,15,59,101,-50,-13,2,-27, 
  /* [42][0][][] */ -45,6,-64,-127,48,-102,7,80, 
  /* [43][0][][] */ 25,-5,84,-6,37,127,89,9, 
  /* [44][0][][] */ -26,-26,-70,127,49,4,-44,-45, 
  /* [45][0][][] */ 67,127,123,-124,52,-59,26,-126, 
  /* [46][0][][] */ -36,-127,-38,35,-10,40,-63,123, 
  /* [47][0][][] */ 36,38,104,7,84,127,124,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044413874857127666, 0.0042363358661532402, 0.0030111225787550211, 0.0034534232690930367, 0.0007368485676124692, 0.0036987834610044956, 0.0046106292866170406, 0.0021542382892221212, 0.0031490649562329054, 0.0057027707807719707, 0.0034044133499264717, 0.0027182304766029119, 0.0025864453054964542, 0.0044242367148399353, 0.0034586344845592976, 0.0028645445127040148, 0.002076280303299427, 0.00072351290145888925, 0.0020016136113554239, 0.0034019614104181528, 0.0042417566291987896, 0.0016512685688212514, 0.0052413246594369411, 0.0034395782276988029, 0.0050826426595449448, 0.0083147156983613968, 0.0031163194216787815, 0.012099534273147583, 0.0024004830047488213, 0.00046626536641269922, 0.0033980163279920816, 0.0074192313477396965, 0.0042554810643196106, 0.0042787813581526279, 0.0021704258397221565, 0.0035423273220658302, 0.0052663097158074379, 0.0068602669052779675, 0.0042692702263593674, 0.0045715705491602421, 0.0027343130204826593, 0.0032771462574601173, 0.0039624515920877457, 0.0053016431629657745, 0.004565047100186348, 0.0018547255313023925, 0.0022867792285978794, 0.0035390106495469809, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7232, -2805, 11953, -9753, 22153, 8374, -9462, 11145, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018652399012353271, 0.00024797071819193661, 0.00019821693422272801, 0.00029842424555681646, 0.00021142447076272219, 0.0001745791087159887, 0.00018253494636155665, 0.0003279900411143899, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-15,-18,-72,-28,-34,16,-21,36,10,-29,-7,108,127,-17,-107, 
  /* [1][0][][] */ 127,-58,-42,10,-49,70,-72,-46,-38,82,-31,-53,-8,4,-60,-20, 
  /* [2][0][][] */ -39,-92,41,45,46,-59,-77,-20,31,-91,24,-127,44,-22,-78,22, 
  /* [3][0][][] */ 39,9,16,17,-13,71,-53,-20,127,47,9,21,3,-15,11,21, 
  /* [4][0][][] */ -92,-35,-31,-127,-11,33,54,-114,33,-22,-49,-38,-118,32,-42,-25, 
  /* [5][0][][] */ 85,54,69,-29,48,-46,-127,-125,-16,-74,65,50,-56,52,67,-42, 
  /* [6][0][][] */ 107,46,-127,-86,28,-76,2,-97,-41,24,-123,99,93,-88,9,72, 
  /* [7][0][][] */ -127,-5,98,-24,-60,6,2,-58,-49,62,80,-29,62,-26,30,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0079272696748375893, 0.010538755916059017, 0.0084242196753621101, 0.012683030217885971, 0.008985539898276329, 0.0074196117930114269, 0.0077577349729835987, 0.013939576223492622, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 14922, -329, 417, 2469, -839, 32, 11911, 2174, -3003, 286, -2473, 2577, -1594, -762, -227, -986, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00015951266686897725, 0.00026781961787492037, 0.00014162770821712911, 0.00017719958850648254, 0.0013147953432053328, 0.0010589988669380546, 0.00013305053289514035, 0.00069845444522798061, 0.00058556266594678164, 0.001330068102106452, 0.00037931170663796365, 0.00025235034991055727, 0.00011442646791692823, 0.00026698323199525476, 0.00025330035714432597, 0.00061179848853498697, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 4,-6,4,6,-20,12,5,15,-4,-11,3,-8,2,-7,2,-1, 8,-5,1,6,13,-1,11,-28,-4,9,-3,88,-4,21,4,-1, 4,-4,-3,5,2,-13,-3,9,4,2,-2,-4,5,-4,-5,-2, 
  /* [0][1][][] */ 8,-8,2,6,127,-23,-127,-23,127,127,-4,-5,112,-25,0,-20, -127,127,127,1,-87,-90,-19,-105,19,-106,127,127,127,127,127,127, 16,-1,-3,1,-10,127,2,-12,1,-13,-8,-4,12,-4,-8,-10, 
  /* [0][2][][] */ -2,-1,-1,-14,-18,16,52,5,-8,-8,-3,3,-9,0,-2,-13, 18,-13,-7,-127,7,-15,-10,127,-3,1,0,-11,-13,-57,-8,-38, -1,-4,-2,-1,1,-4,1,-4,4,2,-5,3,1,-5,-7,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0067792879417538643, 0.011382333002984524, 0.0060191773809492588, 0.0075309821404516697, 0.05587879940867424, 0.045007448643445969, 0.0056546474806964397, 0.029684314504265785, 0.024886412546038628, 0.056527893990278244, 0.016120746731758118, 0.010724889114499092, 0.0048631248064339161, 0.011346787214279175, 0.010765264742076397, 0.026001434773206711, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 2406, 72, -506, 2537, 58668, 44757, 1515, -14778, 6159, -8581, 1050, -27, 2777, -46992, 530, 60741, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00019244484428782016, 0.0016103936359286308, 0.00018254900351166725, 0.00014527309394907206, 3.5562134144129232e-05, 5.0480484787840396e-05, 0.00013812287943437696, 3.727552029886283e-05, 0.00013522089284379035, 5.4799718782305717e-05, 0.00041982976836152375, 0.0013868627138435841, 0.00065240135882049799, 2.3119373508961871e-05, 0.0011152653023600578, 5.0876435125246644e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -111, -31, 
  /* [0][1][][] */ 66, -38, 16, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -78, 
  /* [3][0][][] */ 119, 124, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -101, -127, -44, 
  /* [4][0][][] */ 26, -56, -2, 
  /* [4][1][][] */ 27, -127, 0, 
  /* [4][2][][] */ 20, -80, -11, 
  /* [5][0][][] */ -62, 35, 0, 
  /* [5][1][][] */ -127, 42, 5, 
  /* [5][2][][] */ -84, 32, 1, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -48, 56, -14, 
  /* [6][2][][] */ -34, -49, -85, 
  /* [7][0][][] */ 33, 26, -16, 
  /* [7][1][][] */ 127, 73, -5, 
  /* [7][2][][] */ 31, 3, -25, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -24, 48, -14, 
  /* [9][1][][] */ -17, 127, -15, 
  /* [9][2][][] */ -11, 82, -11, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 78, 23, -7, 
  /* [13][1][][] */ 127, 106, -1, 
  /* [13][2][][] */ 67, 97, 39, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -96, -31, 22, 
  /* [15][1][][] */ -127, -121, 24, 
  /* [15][2][][] */ -16, -70, 0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.049073431640863419, 0.4106503427028656, 0.046549994498491287, 0.037044636905193329, 0.0090683437883853912, 0.012872522696852684, 0.03522133082151413, 0.0095052570104598999, 0.034481324255466461, 0.01397392712533474, 0.10705658793449402, 0.35364997386932373, 0.16636233031749725, 0.0058954400010406971, 0.28439262509346008, 0.012973490171134472, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.14282195270061493, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.091066367924213409, } };
const TfArray<1, int> quant50_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.08402588963508606, } };
const TfArray<1, int> quant53_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10628779977560043, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.073670238256454468, } };
const TfArray<1, int> quant58_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.065593376755714417, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.09138893336057663, } };
const TfArray<1, int> quant62_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.063507869839668274, } };
const TfArray<1, int> quant65_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10687733441591263, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.05384545773267746, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,6 } };
const TfArray<1, float> quant69_scale = { 1, { 0.096591681241989136, } };
const TfArray<1, int> quant69_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,6 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 864, (TfLiteIntArray*)&tensor_dimension69, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
